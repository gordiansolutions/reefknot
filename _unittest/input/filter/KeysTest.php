<?php

namespace gordian\reefknot\input\filter;

require_once dirname (__FILE__) . '/../../../input/filter/Keys.php';

/**
 * Test class for Keys.
 * Generated by PHPUnit on 2012-03-23 at 22:37:01.
 */
class KeysTest extends \PHPUnit_Framework_TestCase
{

	/**
	 * @var Keys
	 */
	protected $object;

	/**
	 * Sets up the fixture, for example, opens a network connection.
	 * This method is called before a test is executed.
	 */
	protected function setUp ()
	{
		$this -> object = new Keys (array ('keys' => array ('foo', 'bar', 'baz', 'quux')));
	}

	/**
	 * Tears down the fixture, for example, closes a network connection.
	 * This method is called after a test is executed.
	 */
	protected function tearDown ()
	{
		
	}

	/**
	 */
	public function testSetConfig ()
	{
		$cfg	= array (
			'keys'	=> array (
				'key1', 'key2', 'key3', 'key4', 'key5'
			)
		);
		
		$this -> object -> setConfig ($cfg);
		$this -> assertEquals ($cfg, $this -> object -> getConfig ());
	}

	public function testSetConfigNoCfgThrowsException ()
	{
		$exception	= NULL;
		
		try 
		{
			$this -> object -> setConfig (array ());
		}
		catch (\Exception $e)
		{
			$exception	= $e;
		}
		
		$this -> assertInstanceOf ('\InvalidArgumentException', $exception);
	}
	
	/**
	 */
	public function testFilter ()
	{
		$dataToFilter	=  array (
			'foo'	=> 1, 
			'bar'	=> 2, 
			'baz'	=> 3, 
			'quux'	=> 4
		);
		
		$expectedResult	= array (
			'foo'	=> 1, 
			'bar'	=> 2, 
			'baz'	=> 3, 
			'quux'	=> 4
		);
		
		$this -> object -> setData ($dataToFilter);
		$this -> assertEquals ($this -> object -> filter (), $expectedResult);
	}
	
	public function testFilter2 ()
	{
		$dataToFilter	=  array (
			'foo'		=> 1, 
			'bar'		=> 2, 
			'baz'		=> 3, 
			'quux'		=> 4,
			'fred'		=> 5,
			'wilma'		=> 6, 
			'barney'	=> 7,
			'betty'		=> 8
		);
		
		$expectedResult	= array (
			'foo'	=> 1, 
			'bar'	=> 2, 
			'baz'	=> 3, 
			'quux'	=> 4
		);
		
		$this -> object -> setData ($dataToFilter);
		$this -> assertEquals ($this -> object -> filter (), $expectedResult);
	}
	
	public function testFilter3 ()
	{
		$dataToFilter	=  array (
			'fred'		=> 5,
			'wilma'		=> 6, 
			'barney'	=> 7,
			'betty'		=> 8
		);
		
		$expectedResult	= array (
		);
		
		$this -> object -> setData ($dataToFilter);
		$this -> assertEquals ($this -> object -> filter (), $expectedResult);
	}
	
	public function testFilter4 ()
	{
		$dataToFilter	=  array (
			'foo'		=> 1, 
			'baz'		=> 3, 
			'fred'		=> 5,
			'barney'	=> 7,
		);
		
		$expectedResult	= array (
			'foo'	=> 1, 
			'baz'	=> 3, 
		);
		
		$this -> object -> setData ($dataToFilter);
		$this -> assertEquals ($this -> object -> filter (), $expectedResult);
	}
}
