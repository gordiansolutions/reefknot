<?php

namespace gordian\reefknot\input\validate;

/**
 * Test class for DataSet.
 * Generated by PHPUnit on 2011-12-17 at 18:10:34.
 */
class DataSetTest extends \PHPUnit_Framework_TestCase
{

	/**
	 * @var gordian\reefknot\input\validate\DataSet
	 */
	protected $object;

	/**
	 * Sets up the fixture, for example, opens a network connection.
	 * This method is called before a test is executed.
	 */
	protected function setUp ()
	{
		$arrMock	= $this -> getMock ('\gordian\reefknot\input\validate\type\IsArray');
		$this -> object = new DataSet ($arrMock);
	}

	/**
	 * Tears down the fixture, for example, closes a network connection.
	 * This method is called after a test is executed.
	 */
	protected function tearDown ()
	{
		
	}

	/**
	 * @todo Implement testAddField().
	 */
	public function testAddField ()
	{
		$field	= $this -> getMock ('\gordian\reefknot\input\validate\iface\Field');
		$this -> assertEmpty ($this -> object -> getFields ());
		$this -> object -> addField ('testfield', $field);
		$this -> assertNotEmpty ($this -> object -> getFields ());
		$this -> assertTrue (array ('testfield' => $field) === $this -> object -> getFields ());
	}
	
	public function testAddFieldThrowsException ()
	{
		$exception	= NULL;
		$field		= $this -> getMock ('\gordian\reefknot\input\validate\iface\Field');
		
		try
		{
			$this -> object -> addField ('testfield', $field)
							-> addField ('testfield2', $field);
		}
		catch (\Exception $e)
		{
			$exception	= $e;
		}
		
		$this -> assertInstanceOf ('\InvalidArgumentException', $exception);
		$this -> assertTrue (array ('testfield' => $field) === $this -> object -> getFields ());
	}
	
	public function testGetField ()
	{
		$this -> object	-> addField ('field1', $this -> getMock ('\gordian\reefknot\input\validate\iface\Field'))
						-> addField ('field2', $this -> getMock ('\gordian\reefknot\input\validate\iface\Field'))
						-> addField ('field3', $this -> getMock ('\gordian\reefknot\input\validate\iface\Field'));
		
		$this -> assertInstanceOf ('\gordian\reefknot\input\validate\iface\Field', $this -> object -> getField ('field2'));
		$this -> assertNull ($this -> object -> getField ('field4'));
	}
	
	/**
	 * @todo Implement testDeleteField().
	 */
	public function testDeleteField ()
	{
		$field	= $this -> getMock ('\gordian\reefknot\input\validate\iface\Field');
		$this -> assertInstanceOf ('\gordian\reefknot\input\validate\iface\Field', $field);
		$this -> object -> addField ('testfield', $field);
		$this -> assertNotEmpty ($this -> object -> getFields ());
		$this -> object -> deleteField ('testfield');
		$this -> assertEmpty ($this -> object -> getFields ());
	}

	/**
	 * @todo Implement testGetFields().
	 */
	public function testGetFields ()
	{
		// Remove the following lines when you implement this test.
		$this -> markTestIncomplete (
			'This test has not been implemented yet.'
		);
	}

	/**
	 * @todo Implement testSetData().
	 */
	public function testSetData ()
	{
		// Remove the following lines when you implement this test.
		$this -> markTestIncomplete (
			'This test has not been implemented yet.'
		);
	}

	/**
	 * @todo Implement testIsValid().
	 */
	public function testIsValid ()
	{
		// Remove the following lines when you implement this test.
		$this -> markTestIncomplete (
			'This test has not been implemented yet.'
		);
	}

}
