<?php

namespace gordian\reefknot\input\validate\prop;

/**
 * Test class for Uri.
 * Generated by PHPUnit on 2011-12-13 at 12:37:27.
 */
class UriTest extends \PHPUnit_Framework_TestCase
{

	/**
	 * @var gordian\reefknot\input\validate\prop\Uri
	 */
	protected $object;

	/**
	 * Sets up the fixture, for example, opens a network connection.
	 * This method is called before a test is executed.
	 */
	protected function setUp ()
	{
		$this -> object = new Uri;
	}

	/**
	 * Tears down the fixture, for example, closes a network connection.
	 * This method is called after a test is executed.
	 */
	protected function tearDown ()
	{
		
	}
	
	public function testIsValidNullPasses ()
	{
		$this -> object -> setData (NULL);
		$this -> assertTrue ($this -> object -> isValid ());
	}
	
	public function testIsValidPass ()
	{
		$this -> object -> setData ('http://localhost/');
		$this -> assertTrue ($this -> object -> isValid ());
	}
	
	public function testIsValidPass2 ()
	{
		$this -> object -> setData ('http://localhost');
		$this -> assertTrue ($this -> object -> isValid ());
	}
	
	public function testIsValidPass3 ()
	{
		$this -> object -> setData ('https://localhost');
		$this -> assertTrue ($this -> object -> isValid ());
	}
	
	public function testIsValidPass4 ()
	{
		$this -> object -> setData ('http://www.example.com/');
		$this -> assertTrue ($this -> object -> isValid ());
	}
	
	public function testIsValidPass6 ()
	{
		$this -> object -> setData ('http://www.example-site.com/');
		$this -> assertTrue ($this -> object -> isValid ());
	}
	
	public function testIsValidPass7 ()
	{
		$this -> object -> setData ('http://www.example.museum/');
		$this -> assertTrue ($this -> object -> isValid ());
	}
	
	public function testIsValidPass8 ()
	{
		$this -> object -> setData ('http://127.0.0.1');
		$this -> assertTrue ($this -> object -> isValid ());
	}
	
	public function testIsValidPass9 ()
	{
		$this -> object -> setData ('http://[0:0:0:0:0:0:0:1]');
		$this -> assertTrue ($this -> object -> isValid ());
	}

	public function testIsValidFail ()
	{
		$this -> object -> setData ('');
		$this -> assertFalse ($this -> object -> isValid ());
	}
	
	public function testIsValidFail2 ()
	{
		$this -> object -> setData ('://localhost');
		$this -> assertFalse ($this -> object -> isValid ());
	}
	
	public function testIsValidFail3 ()
	{
		$this -> object -> setData ('foo://localhost');
		$this -> assertFalse ($this -> object -> isValid ());
	}
	
	public function testIsValidFail5 ()
	{
		$this -> object -> setData ('www.example.com');
		$this -> assertFalse ($this -> object -> isValid ());
	}
	
	public function testIsValidFail4 ()
	{
		$this -> object -> setData ('http://www.example_site.com/');
		$this -> assertFalse ($this -> object -> isValid ());
	}
	
	public function testIsValidWrongTypeThrowsException ()
	{
		$exception	= NULL;
		$this -> object -> setData (new \stdClass ());
		try 
		{
			$this -> object -> isValid ();
		}
		catch (\Exception $e)
		{
			$exception	= $e;
		}
		$this -> assertTrue ($exception instanceof \InvalidArgumentException);
	}
}
