<?php

namespace gordian\reefknot\input\validate\prop;

/**
 * Test class for RegexMatch.
 * Generated by PHPUnit on 2011-12-13 at 12:37:28.
 */
class RegexMatchTest extends \PHPUnit_Framework_TestCase
{

	/**
	 * @var gordian\reefknot\input\validate\prop\RegexMatch
	 */
	protected $object;
	protected $config	= array ('needle' => '/(foo|bar|baz)/');
	/**
	 * Sets up the fixture, for example, opens a network connection.
	 * This method is called before a test is executed.
	 */
	protected function setUp ()
	{
		$this -> object = new RegexMatch ($this -> config);
	}

	/**
	 * Tears down the fixture, for example, closes a network connection.
	 * This method is called after a test is executed.
	 */
	protected function tearDown ()
	{
		
	}

	public function testIsValidNullPasses ()
	{
		$this -> object -> setData (NULL);
		$this -> assertTrue ($this -> object -> isValid ());
	}
	
	public function testIsValidPasses ()
	{
		$this -> object -> setData ('foo');
		$this -> assertTrue ($this -> object -> isValid ());
	}
	
	public function testIsValidFails ()
	{
		$this -> object -> setData ('quux');
		$this -> assertFalse ($this -> object -> isValid ());
	}
	
	public function testIsValidWrongTypeThrowsException ()
	{
		$exception	= NULL;
		$this -> object -> setData (12345);
		try
		{
			$this -> object -> isValid ();
		}
		catch (\Exception $e)
		{
			$exception	= $e;
		}
		$this -> assertTrue ($exception instanceof \InvalidArgumentException);
		$this -> assertTrue ($this -> object -> getConfig () == $this -> config);
	}
	
	/**
	 * Test that trying to configure with no data triggers an InvalidArgumentException
	 */
	public function testSetConfigEmptyThrowsException ()
	{
		$exception	= NULL;
		try
		{
			$this -> object -> setConfig (array ());
		}
		catch (\Exception $e)
		{
			$exception	= $e;
		}
		$this -> assertTrue ($exception instanceof \InvalidArgumentException);
		$this -> assertTrue ($this -> object -> getConfig () == $this -> config);
	}
	
	/**
	 * Test that trying to configure with no needle data triggers an InvalidArgumentException 
	 */
	public function testSetConfigNoLimitThrowsException ()
	{
		$exception	= NULL;
		try
		{
			$this -> object -> setConfig (array ('foo' => 'bar'));
		}
		catch (\Exception $e)
		{
			$exception	= $e;
		}
		$this -> assertTrue ($exception instanceof \InvalidArgumentException);
		$this -> assertTrue ($this -> object -> getConfig () == $this -> config);
	}
	
	/**
	 * Test that trying to set a needle with invalid data triggers an InvalidArgumentException 
	 */
	public function testSetConfigInvalidLimitThrowsException ()
	{
		$exception	= NULL;
		try
		{
			$this -> object -> setConfig (array ('needle' => 12345));
		}
		catch (\Exception $e)
		{
			$exception	= $e;
		}
		$this -> assertTrue ($exception instanceof \InvalidArgumentException);
		$this -> assertTrue ($this -> object -> getConfig () == $this -> config);
	}
	
	/**
	 * Test that trying to set an empty needle triggers an InvalidArgumentException 
	 */
	public function testSetConfigZeroLimitThrowsException ()
	{
		$exception	= NULL;
		try
		{
			$this -> object -> setConfig (array ('needle' => ''));
		}
		catch (\Exception $e)
		{
			$exception	= $e;
		}
		$this -> assertTrue ($exception instanceof \InvalidArgumentException);
		$this -> assertTrue ($this -> object -> getConfig () == $this -> config);
	}
	
	/**
	 * Test that valid needles can be passed to the object 
	 */
	public function testSetConfigPasses ()
	{
		$this -> markTestIncomplete ('');
		$exception	= NULL;
		try
		{
			$this -> object -> setConfig (array ('needle' => '/quux/'));
		}
		catch (\Exception $e)
		{
			$exception	= $e;
		}
		$this -> assertNull ($exception);
		$this -> assertTrue ($this -> object -> getConfig () == array ('needle' => '/(quux)/'));
	}
}
