<?php

namespace gordian\reefknot\input\validate\prop;

/**
 * Test class for Negate.
 * Generated by PHPUnit on 2011-12-29 at 15:50:10.
 */
class NegateTest extends \PHPUnit_Framework_TestCase
{

	/**
	 * @var gordian\reefknot\input\validate\prop\Negate
	 */
	protected $object;

	/**
	 * Helper for building mock props
	 * 
	 * @param mixed $value
	 * @param bool $isValid
	 * @return gordian\reefknot\input\validate\iface\Prop 
	 */
	protected function makeStubProp ($value = NULL, $isValid = true)
	{
		$studProp	= $this -> getMockBuilder ('gordian\reefknot\input\validate\iface\Prop')
					-> disableOriginalConstructor ()
					-> getMock ();
		
		$studProp	-> expects ($this -> any ())
					-> method ('setData')
					-> will ($this -> returnValue ($studProp));
		
		$studProp	-> expects ($this -> any ())
					-> method ('getData')
					-> will ($this -> returnValue ($value));
		
		$studProp	-> expects ($this -> any ())
					-> method ('isValid')
					-> will ($this -> returnValue ($isValid));

		return ($studProp);
	}

	/**
	 * Sets up the fixture, for example, opens a network connection.
	 * This method is called before a test is executed.
	 */
	protected function setUp ()
	{
		$this -> object = new Negate (array ('prop' => $this -> makeStubProp ('1234', true)));
	}

	/**
	 * Tears down the fixture, for example, closes a network connection.
	 * This method is called after a test is executed.
	 */
	protected function tearDown ()
	{
		
	}

	public function testIsValidNullPasses ()
	{
		$cfg	= array ('prop' => $this -> makeStubProp ('1234', true));
		
		$this -> object	-> setConfig ($cfg) 
						-> setData (NULL);
		
		$this -> assertTrue ($cfg ['prop'] -> isValid ());
		$this -> assertTrue ($this -> object -> isValid ());
	}

	public function testIsValidNullPasses2 ()
	{
		$cfg	= array ('prop' => $this -> makeStubProp ('1234', false));
		
		$this -> object	-> setConfig ($cfg) 
						-> setData (NULL);
		
		$this -> assertFalse ($cfg ['prop'] -> isValid ());
		$this -> assertTrue ($this -> object -> isValid ());
	}
	
	public function testIsValidNotMatchPasses ()
	{
		$cfg	= array ('prop' => $this -> makeStubProp ('1234', false));
		
		$this -> object	-> setConfig ($cfg) 
						-> setData ('5678');
		
		$this -> assertFalse ($cfg ['prop'] -> isValid ());
		$this -> assertTrue ($this -> object -> isValid ());
	}
	
	public function testIsValidMatchFails ()
	{
		$cfg	= array ('prop' => $this -> makeStubProp ('1234', true));
		
		$this -> object	-> setConfig ($cfg) 
						-> setData ('1234');
		
		$this -> assertTrue ($cfg ['prop'] -> isValid ());
		$this -> assertFalse ($this -> object -> isValid ());
	}
	
	/**
	 * Test that trying to configure with no data triggers an InvalidArgumentException
	 */
	public function testSetConfigEmptyThrowsException ()
	{
		$cfg		= array ();
		$exception	= NULL;
		try
		{
			$this -> object -> setConfig ($cfg);
		}
		catch (\Exception $e)
		{
			$exception	= $e;
		}
		$this -> assertInstanceOf ('\InvalidArgumentException', $exception);
		$this -> assertFalse ($this -> object -> getConfig () === $cfg);
	}
	
	/**
	 * Test that trying to configure with no prop data triggers an InvalidArgumentException 
	 */
	public function testSetConfigNoPropsThrowsException ()
	{
		$cfg		= array ('foo' => 'bar');
		$exception	= NULL;
		try
		{
			$this -> object -> setConfig ($cfg);
		}
		catch (\Exception $e)
		{
			$exception	= $e;
		}
		$this -> assertInstanceOf ('\InvalidArgumentException', $exception);
		$this -> assertFalse ($this -> object -> getConfig () === $cfg);
	}
	
	/**
	 * Test that trying to set a props with invalid data triggers an InvalidArgumentException 
	 */
	public function testSetConfigInvalidPropsThrowsException ()
	{
		$cfg		= array ('prop' => pi ());
		$exception	= NULL;
		try
		{
			$this -> object -> setConfig ($cfg);
		}
		catch (\Exception $e)
		{
			$exception	= $e;
		}
		$this -> assertInstanceOf ('\InvalidArgumentException', $exception);
		$this -> assertFalse ($this -> object -> getConfig () === $cfg);
	}
	
	/**
	 * Test that trying to set an empty props triggers an InvalidArgumentException 
	 */
	public function testSetConfigEmptyNeedleThrowsException ()
	{
		$cfg		= array ('prop' => NULL);
		$exception	= NULL;
		try
		{
			$this -> object -> setConfig ($cfg);
		}
		catch (\Exception $e)
		{
			$exception	= $e;
		}
		$this -> assertInstanceOf ('\InvalidArgumentException', $exception);
		$this -> assertFalse ($this -> object -> getConfig () === $cfg);
	}
	
	/**
	 * Test that valid needles can be passed to the object 
	 */
	public function testSetConfigPasses ()
	{
		$cfg		= array ('prop' => $this -> makeStubProp (123, false));
		$exception	= NULL;
		try
		{
			$this -> object -> setConfig ($cfg);
		}
		catch (\Exception $e)
		{
			$exception	= $e;
		}
		$this -> assertNull ($exception);
		$this -> assertTrue ($this -> object -> getConfig () === $cfg);
	}
}
