<?php
namespace gordian\reefknot\input\validate\prop;

/**
 * Test class for Equals.
 * Generated by PHPUnit on 2011-12-21 at 22:28:25.
 */
class EqualsTest extends \PHPUnit_Framework_TestCase
{
	/**
	 * @var gordian\reefknot\input\validate\prop\Equals
	 */
	protected $object;
	
	/**
	 * Helper for building mock fields
	 * 
	 * @param mixed $value
	 * @param bool $isValid
	 * @return gordian\reefknot\input\validate\Field 
	 */
	protected function makeStubField ($value = NULL, $isValid = true)
	{
		$stubField	= $this	-> getMockBuilder ('gordian\reefknot\input\validate\Field')
							-> disableOriginalConstructor ()
							-> getMock ();
		
		$stubField			-> expects ($this -> any ()) 
							-> method ('isValid')
							-> will ($this -> returnValue ($isValid));
		
		$stubField		 	-> expects ($this -> any ()) 
							-> method ('getData')
							-> will ($this -> returnValue ($value));
		
		return ($stubField);
	}
	
	/**
	 * Sets up the fixture, for example, opens a network connection.
	 * This method is called before a test is executed.
	 */
	protected function setUp ()
	{
		// Mocked field with a value of 42
		$this -> object = new Equals (array ('value' => 'Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.'));
		
		// Set a mocked field for the prop to belong to
		$this -> object -> setParent ($this -> makeStubField ('A man, a plan, a canal, Panama.'));
	}

	/**
	 * Tears down the fixture, for example, closes a network connection.
	 * This method is called after a test is executed.
	 */
	protected function tearDown ()
	{
		
	}
	
	/**
	 * Test that a null value passes validation 
	 */
	public function testIsValidNullPasses ()
	{
		$this -> object -> setData (NULL);
		$this -> assertTrue ($this -> object -> isValid ());
	}
	
	/**
	 * Test that validation always passes if the value field is the same as the 
	 * parent field
	 */
	public function testIsValidSameFieldPasses ()
	{
		$this -> object	-> setConfig (array ('value' => $this -> object -> getParent ()))
						-> setData ('Any value here should still result in a pass');
		
		$this -> assertTrue ($this -> object -> isValid ());
	}
	
	/**
	 * Test that an indexed array field can be validated against 
	 */
	public function testIsValidArrayFieldPasses ()
	{
		$this -> object -> setConfig (array ('value' => $this -> makeStubField (array (1, 2, 3, 4, 5)))) 
						-> setData (array (1, 2, 3, 4, 5));
		
		$this -> assertTrue ($this -> object -> isValid ());
	}
	
	/**
	 * Test that an associatiave array field can be validated against 
	 */
	public function testIsValidAssocFieldPasses ()
	{
		$this -> object -> setConfig (array ('value' => $this -> makeStubField (array ('a' => 1, 'b' => 2, 'c' => 3, 'd' => 4, 'e' => 5)))) 
						-> setData (array ('a' => 1, 'b' => 2, 'c' => 3, 'd' => 4, 'e' => 5));
		
		$this -> assertTrue ($this -> object -> isValid ());
	}
	
	/**
	 * Test that a boolean array field can be validated against 
	 */
	public function testIsValidBoolFieldPasses ()
	{
		$this -> object -> setConfig (array ('value' => $this -> makeStubField (true))) 
						-> setData (true);
		
		$this -> assertTrue ($this -> object -> isValid ());
		
		$this -> object -> setConfig (array ('value' => $this -> makeStubField (false))) 
						-> setData (false);
		
		$this -> assertTrue ($this -> object -> isValid ());
	}
	
	/**
	 * Test that a float field can be validated against 
	 */
	public function testIsValidFloatFieldPasses ()
	{
		$this -> object -> setConfig (array ('value' => $this -> makeStubField (pi ())))
						-> setData (pi ());
		
		$this -> assertTrue ($this -> object -> isValid ());
	}
	
	/**
	 * Test that an integer field can be validated against 
	 */
	public function testIsValidIntFieldPasses ()
	{
		$this -> object -> setConfig (array ('value' => $this -> makeStubField (42)))
						-> setData (42);
		
		$this -> assertTrue ($this -> object -> isValid ());
	}
	
	/**
	 * Test that an object field can be validated against 
	 */
	public function testIsValidObjectFieldPasses ()
	{
		$testData	= new \stdClass ();
		
		$this -> object -> setConfig (array ('value' => $this -> makeStubField ($testData)))
						-> setData ($testData);
		
		$this -> assertTrue ($this -> object -> isValid ());
	}
	
	/**
	 * Test that a string field can be validated against 
	 */
	public function testIsValidStringFieldPasses ()
	{
		$this -> object -> setConfig (array ('value' => $this -> makeStubField ('The quick brown fox jumps over the lazy dog.')))
						-> setData ('The quick brown fox jumps over the lazy dog.');
		
		$this -> assertTrue ($this -> object -> isValid ());
	}
	
	/**
	 * Test that indexed array field validation fails for non-matching data 
	 */
	public function testIsValidArrayFieldFails ()
	{
		$this -> object -> setConfig (array ('value' => $this -> makeStubField (array (1, 2, 3, 4, 5)))); 
		
		// Array too short
		$this -> object -> setData (array (1, 2, 3, 4));
		$this -> assertFalse ($this -> object -> isValid ());
		
		// Array too long
		$this -> object -> setData (array (1, 2, 3, 4, 5, 6));
		$this -> assertFalse ($this -> object -> isValid ());
		
		// Array order is wrong
		$this -> object -> setData (array (5, 4, 3, 2, 1));
		$this -> assertFalse ($this -> object -> isValid ());
		
		// Associative array when indexed array is expected
		$this -> object -> setData (array ('a' => 1, 'b' => 2, 'c' => 3, 'd' => 4, 'e' => 5));
		$this -> assertFalse ($this -> object -> isValid ());
		
		// Int
		$this -> object -> setData (42);
		$this -> assertFalse ($this -> object -> isValid ());
		
		// Float
		$this -> object -> setData (pi ());
		$this -> assertFalse ($this -> object -> isValid ());
		
		// String
		$this -> object -> setData ('12345');
		$this -> assertFalse ($this -> object -> isValid ());
	}
	
	/**
	 * Test that associative array field validation fails for non-matching data
	 */
	public function testIsValidAssocFieldFails ()
	{
		$this -> object -> setConfig (array ('value' => $this -> makeStubField (array ('a' => 1, 'b' => 2, 'c' => 3, 'd' => 4, 'e' => 5)))); 
		
		// Array too short
		$this -> object -> setData (array ('a' => 1, 'b' => 2, 'c' => 3, 'd' => 4));
		$this -> assertFalse ($this -> object -> isValid ());
		
		// Array too long
		$this -> object -> setData (array ('a' => 1, 'b' => 2, 'c' => 3, 'd' => 4, 'e' => 5, 'f' => 6));
		$this -> assertFalse ($this -> object -> isValid ());
		
		// Array order is wrong
		$this -> object -> setData (array ('e' => 5, 'd' => 4, 'c' => 3, 'b' => 2, 'a' => 1));
		$this -> assertFalse ($this -> object -> isValid ());
		
		// Array value order is wrong
		$this -> object -> setData (array ('a' => 5, 'b' => 4, 'c' => 3, 'd' => 2, 'e' => 1));
		$this -> assertFalse ($this -> object -> isValid ());
		
		// Indexed array when associative array is expected
		$this -> object -> setData (array (1, 2, 3, 4, 5));
		$this -> assertFalse ($this -> object -> isValid ());
		
		// Int
		$this -> object -> setData (42);
		$this -> assertFalse ($this -> object -> isValid ());
		
		// Float
		$this -> object -> setData (pi ());
		$this -> assertFalse ($this -> object -> isValid ());
		
		// String
		$this -> object -> setData ('12345');
		$this -> assertFalse ($this -> object -> isValid ());
	}
	
	/**
	 * Test that boolean field validation fails for non-matching data 
	 */
	public function testIsValidBoolFieldFails ()
	{
		$this -> object -> setConfig (array ('value' => $this -> makeStubField (true)));
		
		// Unexpected value
		$this -> object -> setData (false);
		$this -> assertFalse ($this -> object -> isValid ());
		
		// string
		$this -> object -> setData ('The quick brown fox jumps over the lazy dog.');
		$this -> assertFalse ($this -> object -> isValid ());
		
		// Int
		$this -> object -> setData (3);
		$this -> assertFalse ($this -> object -> isValid ());
		
		// Float
		$this -> object -> setData (array (pi ()));
		$this -> assertFalse ($this -> object -> isValid ());
	}
	
	/**
	 * Test that float field validation fails for non-matching data 
	 */
	public function testIsValidFloatFieldFails ()
	{
		$this -> object -> setConfig (array ('value' => $this -> makeStubField (pi ())));
		
		// String
		$this -> object -> setData ('pi');
		$this -> assertFalse ($this -> object -> isValid ());
		
		// String that happens to have a value like a float
		$this -> object -> setData ((string) pi ());
		$this -> assertFalse ($this -> object -> isValid ());
		
		// Int
		$this -> object -> setData (3);
		$this -> assertFalse ($this -> object -> isValid ());
		
		// Array
		$this -> object -> setData (array (pi ()));
		$this -> assertFalse ($this -> object -> isValid ());
	}
	
	/**
	 * Test that integer field validation fails for non-matching data 
	 */
	public function testIsValidIntFieldFails ()
	{
		$this -> object -> setConfig (array ('value' => $this -> makeStubField (42)));
		
		$this -> object -> setData ('Forty Two');
		$this -> assertFalse ($this -> object -> isValid ());
		$this -> object -> setData ('42');
		$this -> assertFalse ($this -> object -> isValid ());
		$this -> object -> setData (42.0);
		$this -> assertFalse ($this -> object -> isValid ());
		$this -> object -> setData (array (42));
		$this -> assertFalse ($this -> object -> isValid ());
		$this -> object -> setData (array (4, 2));
		$this -> assertFalse ($this -> object -> isValid ());
	}
	
	/**
	 * Test that object field validation fails for non-matching data 
	 */
	public function testIsValidObjectFieldFails ()
	{
		$testData	= new \stdClass ();
		$stubField	= $this -> makeStubField ($testData);
		
		$this -> object -> setConfig (array ('value' => $stubField));
		
		$this -> object -> setData (clone ($testData));
		$this -> assertFalse ($this -> object -> isValid ());
		
		$this -> object -> setData ('pi');
		$this -> assertFalse ($this -> object -> isValid ());
		
		$this -> object -> setData ((string) pi ());
		$this -> assertFalse ($this -> object -> isValid ());
		
		$this -> object -> setData (3);
		$this -> assertFalse ($this -> object -> isValid ());
		
		$this -> object -> setData (array (pi ()));
		$this -> assertFalse ($this -> object -> isValid ());
		
		$this -> object -> setData (array (clone ($testData)));
		$this -> assertFalse ($this -> object -> isValid ());
	}
	
	/**
	 * Test that string field validation fails for non-matching data
	 */
	public function testIsValidStringFieldFails ()
	{
		$this -> object -> setConfig (array ('value' => $this -> makeStubField ('The quick brown fox jumps over the lazy dog.')));
		
		// Non-matching string
		$this -> object -> setData ('Jackdaws love my big sphinx of quartz.');
		$this -> assertFalse ($this -> object -> isValid ());
		
		// Float
		$this -> object -> setData (pi ());
		$this -> assertFalse ($this -> object -> isValid ());
		
		// Int
		$this -> object -> setData (3);
		$this -> assertFalse ($this -> object -> isValid ());
		
		// Array
		$this -> object -> setData (array ('The quick brown fox jumps over the lazy dog.'));
		$this -> assertFalse ($this -> object -> isValid ());
		
		// Array with each element bring a character in the expecting match
		$this -> object -> setData (str_split ('The quick brown fox jumps over the lazy dog.'));
		$this -> assertFalse ($this -> object -> isValid ());
	}
	
	/**
	 * Test that an indexed array value can be validated against 
	 */
	public function testIsValidArrayValPasses ()
	{
		$this -> object -> setConfig (array ('value' => array (1, 2, 3, 4, 5))) 
						-> setData (array (1, 2, 3, 4, 5));
		
		$this -> assertTrue ($this -> object -> isValid ());
	}
	
	/**
	 * Test that an associatiave array value can be validated against 
	 */
	public function testIsValidAssocValPasses ()
	{
		$this -> object -> setConfig (array ('value' => array ('a' => 1, 'b' => 2, 'c' => 3, 'd' => 4, 'e' => 5))) 
						-> setData (array ('a' => 1, 'b' => 2, 'c' => 3, 'd' => 4, 'e' => 5));
		
		$this -> assertTrue ($this -> object -> isValid ());
	}
	
	/**
	 * Test that a boolean array value can be validated against 
	 */
	public function testIsValidBoolValPasses ()
	{
		$this -> object -> setConfig (array ('value' => true)) 
						-> setData (true);
		
		$this -> assertTrue ($this -> object -> isValid ());
		
		$this -> object -> setConfig (array ('value' => false)) 
						-> setData (false);
		
		$this -> assertTrue ($this -> object -> isValid ());
	}
	
	/**
	 * Test that a float value can be validated against 
	 */
	public function testIsValidFloatValPasses ()
	{
		$this -> object -> setConfig (array ('value' => pi ()))
						-> setData (pi ());
		
		$this -> assertTrue ($this -> object -> isValid ());
	}
	
	/**
	 * Test that an integer value can be validated against 
	 */
	public function testIsValidIntValPasses ()
	{
		$this -> object -> setConfig (array ('value' => 42))
						-> setData (42);
		
		$this -> assertTrue ($this -> object -> isValid ());
	}
	
	/**
	 * Test that an object value can be validated against 
	 */
	public function testIsValidObjectValPasses ()
	{
		$testData	= new \stdClass ();
		
		$this -> object -> setConfig (array ('value' => $testData))
						-> setData ($testData);
		
		$this -> assertTrue ($this -> object -> isValid ());
	}
	
	/**
	 * Test that a string value can be validated against 
	 */
	public function testIsValidStringValPasses ()
	{
		$this -> object -> setConfig (array ('value' => 'The quick brown fox jumps over the lazy dog.'))
						-> setData ('The quick brown fox jumps over the lazy dog.');
		
		$this -> assertTrue ($this -> object -> isValid ());
	}
	
	/**
	 * Test that indexed array value validation fails for non-matching data 
	 */
	public function testIsValidArrayValFails ()
	{
		$this -> object -> setConfig (array ('value' => array (1, 2, 3, 4, 5))); 
		
		// Array too short
		$this -> object -> setData (array (1, 2, 3, 4));
		$this -> assertFalse ($this -> object -> isValid ());
		
		// Array too long
		$this -> object -> setData (array (1, 2, 3, 4, 5, 6));
		$this -> assertFalse ($this -> object -> isValid ());
		
		// Array order is wrong
		$this -> object -> setData (array (5, 4, 3, 2, 1));
		$this -> assertFalse ($this -> object -> isValid ());
		
		// Associative array when indexed array is expected
		$this -> object -> setData (array ('a' => 1, 'b' => 2, 'c' => 3, 'd' => 4, 'e' => 5));
		$this -> assertFalse ($this -> object -> isValid ());
		
		// Int
		$this -> object -> setData (42);
		$this -> assertFalse ($this -> object -> isValid ());
		
		// Float
		$this -> object -> setData (pi ());
		$this -> assertFalse ($this -> object -> isValid ());
		
		// String
		$this -> object -> setData ('12345');
		$this -> assertFalse ($this -> object -> isValid ());
	}
	
	/**
	 * Test that associative array value validation fails for non-matching data
	 */
	public function testIsValidAssocValFails ()
	{
		$this -> object -> setConfig (array ('value' => array ('a' => 1, 'b' => 2, 'c' => 3, 'd' => 4, 'e' => 5))); 
		
		// Array too short
		$this -> object -> setData (array ('a' => 1, 'b' => 2, 'c' => 3, 'd' => 4));
		$this -> assertFalse ($this -> object -> isValid ());
		
		// Array too long
		$this -> object -> setData (array ('a' => 1, 'b' => 2, 'c' => 3, 'd' => 4, 'e' => 5, 'f' => 6));
		$this -> assertFalse ($this -> object -> isValid ());
		
		// Array order is wrong
		$this -> object -> setData (array ('e' => 5, 'd' => 4, 'c' => 3, 'b' => 2, 'a' => 1));
		$this -> assertFalse ($this -> object -> isValid ());
		
		// Array value order is wrong
		$this -> object -> setData (array ('a' => 5, 'b' => 4, 'c' => 3, 'd' => 2, 'e' => 1));
		$this -> assertFalse ($this -> object -> isValid ());
		
		// Indexed array when associative array is expected
		$this -> object -> setData (array (1, 2, 3, 4, 5));
		$this -> assertFalse ($this -> object -> isValid ());
		
		// Int
		$this -> object -> setData (42);
		$this -> assertFalse ($this -> object -> isValid ());
		
		// Float
		$this -> object -> setData (pi ());
		$this -> assertFalse ($this -> object -> isValid ());
		
		// String
		$this -> object -> setData ('12345');
		$this -> assertFalse ($this -> object -> isValid ());
	}
	
	/**
	 * Test that boolean value validation fails for non-matching data 
	 */
	public function testIsValidBoolValFails ()
	{
		$this -> object -> setConfig (array ('value' => true));
		
		// Unexpected value
		$this -> object -> setData (false);
		$this -> assertFalse ($this -> object -> isValid ());
		
		// string
		$this -> object -> setData ('The quick brown fox jumps over the lazy dog.');
		$this -> assertFalse ($this -> object -> isValid ());
		
		// Int
		$this -> object -> setData (3);
		$this -> assertFalse ($this -> object -> isValid ());
		
		// Float
		$this -> object -> setData (array (pi ()));
		$this -> assertFalse ($this -> object -> isValid ());
	}
	
	/**
	 * Test that float value validation fails for non-matching data 
	 */
	public function testIsValidFloatValFails ()
	{
		$this -> object -> setConfig (array ('value' => pi ()));
		
		// String
		$this -> object -> setData ('pi');
		$this -> assertFalse ($this -> object -> isValid ());
		
		// String that happens to have a value like a float
		$this -> object -> setData ((string) pi ());
		$this -> assertFalse ($this -> object -> isValid ());
		
		// Int
		$this -> object -> setData (3);
		$this -> assertFalse ($this -> object -> isValid ());
		
		// Array
		$this -> object -> setData (array (pi ()));
		$this -> assertFalse ($this -> object -> isValid ());
	}
	
	/**
	 * Test that integer value validation fails for non-matching data 
	 */
	public function testIsValidIntValFails ()
	{
		$this -> object -> setConfig (array ('value' => 42));
		
		$this -> object -> setData ('Forty Two');
		$this -> assertFalse ($this -> object -> isValid ());
		$this -> object -> setData ('42');
		$this -> assertFalse ($this -> object -> isValid ());
		$this -> object -> setData (42.0);
		$this -> assertFalse ($this -> object -> isValid ());
		$this -> object -> setData (array (42));
		$this -> assertFalse ($this -> object -> isValid ());
		$this -> object -> setData (array (4, 2));
		$this -> assertFalse ($this -> object -> isValid ());
	}
	
	/**
	 * Test that object value validation fails for non-matching data 
	 */
	public function testIsValidObjectValFails ()
	{
		$testData	= new \stdClass ();
		
		$this -> object -> setConfig (array ('value' => $testData));
		
		$this -> object -> setData (clone ($testData));
		$this -> assertFalse ($this -> object -> isValid ());
		
		$this -> object -> setData ('pi');
		$this -> assertFalse ($this -> object -> isValid ());
		
		$this -> object -> setData ((string) pi ());
		$this -> assertFalse ($this -> object -> isValid ());
		
		$this -> object -> setData (3);
		$this -> assertFalse ($this -> object -> isValid ());
		
		$this -> object -> setData (array (pi ()));
		$this -> assertFalse ($this -> object -> isValid ());
		
		$this -> object -> setData (array (clone ($testData)));
		$this -> assertFalse ($this -> object -> isValid ());
	}
	
	/**
	 * Test that string value validation fails for non-matching data
	 */
	public function testIsValidStringValFails ()
	{
		$this -> object -> setConfig (array ('value' => 'The quick brown fox jumps over the lazy dog.'));
		
		// Non-matching string
		$this -> object -> setData ('Jackdaws love my big sphinx of quartz.');
		$this -> assertFalse ($this -> object -> isValid ());
		
		// Float
		$this -> object -> setData (pi ());
		$this -> assertFalse ($this -> object -> isValid ());
		
		// Int
		$this -> object -> setData (3);
		$this -> assertFalse ($this -> object -> isValid ());
		
		// Array
		$this -> object -> setData (array ('The quick brown fox jumps over the lazy dog.'));
		$this -> assertFalse ($this -> object -> isValid ());
		
		// Array with each element bring a character in the expecting match
		$this -> object -> setData (str_split ('The quick brown fox jumps over the lazy dog.'));
		$this -> assertFalse ($this -> object -> isValid ());
	}
	
	/**
	 * Test that trying to configure with no data triggers an InvalidArgumentException
	 */
	public function testSetConfigEmptyThrowsException ()
	{
		$oldCfg		= $this -> object -> getConfig ();
		$exception	= NULL;
		try
		{
			$this -> object -> setConfig (array ());
		}
		catch (\Exception $e)
		{
			$exception	= $e;
		}
		$this -> assertTrue ($exception instanceof \InvalidArgumentException);
		$this -> assertTrue ($this -> object -> getConfig () === $oldCfg);
	}
	
	/**
	 * Test that trying to configure with no field triggers an InvalidArgumentException 
	 */
	public function testSetConfigNoFieldThrowsException ()
	{
		$oldCfg		= $this -> object -> getConfig ();
		$exception	= NULL;
		try
		{
			$this -> object -> setConfig (array ('foo' => 'bar'));
		}
		catch (\Exception $e)
		{
			$exception	= $e;
		}
		$this -> assertTrue ($exception instanceof \InvalidArgumentException);
		$this -> assertTrue ($this -> object -> getConfig () === $oldCfg);
	}
	
	/**
	 * Test that trying to set a limit with invalid data triggers an InvalidArgumentException 
	 */
	public function testSetConfigInvalidFieldThrowsException ()
	{
		$oldCfg		= $this -> object -> getConfig ();
		$exception	= NULL;
		try
		{
			$this -> object -> setConfig (array ('value' => NULL));
		}
		catch (\Exception $e)
		{
			$exception	= $e;
		}
		$this -> assertTrue ($exception instanceof \InvalidArgumentException);
		$this -> assertTrue ($this -> object -> getConfig () === $oldCfg);
	}
	
	/**
	 * Test that valid limits can be passed to the object 
	 */
	public function testSetConfigPasses ()
	{
		$oldCfg		= $this -> object -> getConfig ();
		$exception	= NULL;
		$stubField	= $this	-> getMockBuilder ('gordian\reefknot\input\validate\Field')
							-> disableOriginalConstructor ()
							-> getMock ();
		
		$stubField 	-> expects ($this -> any ()) 
					-> method ('isValid')
					-> will ($this -> returnValue (false));
		try
		{
			$this -> object -> setConfig (array ('value' => $stubField));
		}
		catch (\Exception $e)
		{
			$exception	= $e;
		}
		$this -> assertNull ($exception);
		$this -> assertFalse ($this -> object -> getConfig () === $oldCfg);
	}
}
