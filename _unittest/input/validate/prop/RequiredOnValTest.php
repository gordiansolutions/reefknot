<?php

namespace gordian\reefknot\input\validate\prop;

use gordian\reefknot\input\validate\iface;

/**
 * Test class for RequiredOnVal.
 * Generated by PHPUnit on 2012-01-27 at 08:32:53.
 */
class RequiredOnValTest extends \PHPUnit_Framework_TestCase
{

	/**
	 * @var gordian\reefknot\input\validate\prop\RequiredOnVal
	 */
	protected $object;

	/**
	 * Helper for building validatables
	 * 
	 * @param mixed $value What value the mock should return when its getData() method is called
	 * @param bool $isValid Whether the mock returns true or false when isValid() is called on it
	 * @return gordian\reefknot\input\validate\Field 
	 */
	protected function makeStubField ($value = NULL, $isValid = true)
	{
		$stubField	= $this	-> getMockBuilder ('gordian\reefknot\input\validate\iface\Validatable')
							-> disableOriginalConstructor ()
							-> getMock ();
		
		$stubField			-> expects ($this -> any ()) 
							-> method ('isValid')
							-> will ($this -> returnValue ($isValid));
		
		$stubField		 	-> expects ($this -> any ()) 
							-> method ('getData')
							-> will ($this -> returnValue ($value));
		
		return ($stubField);
	}
	
	/**
	 * Sets up the fixture, for example, opens a network connection.
	 * This method is called before a test is executed.
	 */
	protected function setUp ()
	{
		$this -> object = new RequiredOnVal (array (
			'dependant'			=> 0, 
			'requireWhenEmpty'	=> true
		));
	}

	/**
	 * Tears down the fixture, for example, closes a network connection.
	 * This method is called after a test is executed.
	 */
	protected function tearDown ()
	{
		
	}
	
	/**
	 * If our data is required when the dependant is empty and the dependant is
	 * empty, then our data should not pass validation if it doesn't have a 
	 * value. 
	 */
	public function testIsValid1 ()
	{
		$cfg	= array ('dependant' => NULL, 'requireWhenEmpty' => true);
		$this -> object	-> setConfig ($cfg)
						-> setData (NULL);
		$this -> assertFalse ($this -> object -> isValid ());
	}
	
	/**
	 * If our data is required when the dependant is empty and the dependant is
	 * empty, then our data should pass validation if it has a value. 
	 */
	public function testIsValid2 ()
	{
		$cfg	= array ('dependant' => NULL, 'requireWhenEmpty' => true);
		$this -> object	-> setConfig ($cfg)
						-> setData (12345);
		$this -> assertTrue ($this -> object -> isValid ());
	}
	
	/**
	 * If our data is required when the dependant is empty and the dependant is
	 * not empty, then our data should pass validation if it doesn't have a 
	 * value.
	 */
	public function testIsValid3 ()
	{
		$cfg	= array ('dependant' => 123, 'requireWhenEmpty' => true);
		$this -> object	-> setConfig ($cfg)
						-> setData (NULL);
		$this -> assertTrue ($this -> object -> isValid ());
	}
	
	/**
	 * If our data is required when the dependant is empty and the dependant is
	 * not empty, then our data should pass validation if it has a value.
	 */
	public function testIsValid4 ()
	{
		$cfg	= array ('dependant' => 123, 'requireWhenEmpty' => true);
		$this -> object	-> setConfig ($cfg)
						-> setData (12345);
		$this -> assertTrue ($this -> object -> isValid ());
	}
	
	/**
	 * If our data is required when the dependant is not empty and the dependant
	 * is empty, our data should pass validation if it doesn't have a value. 
	 */
	public function testIsValid5 ()
	{
		$cfg	= array ('dependant' => NULL, 'requireWhenEmpty' => false);
		$this -> object	-> setConfig ($cfg)
						-> setData (NULL);
		$this -> assertTrue ($this -> object -> isValid ());
	}
	
	/**
	 * If our data is required when the dependant is not empty and the dependant
	 * is empty, our data should pass validation if it has a value. 
	 */
	public function testIsValid6 ()
	{
		$cfg	= array ('dependant' => NULL, 'requireWhenEmpty' => false);
		$this -> object	-> setConfig ($cfg)
						-> setData (12345);
		$this -> assertTrue ($this -> object -> isValid ());
	}
	
	/**
	 * If our data is required when the dependant is not empty and the dependant
	 * is not empty, our data should not pass validation if it doesn't have a
	 * value. 
	 */
	public function testIsValid7 ()
	{
		$cfg	= array ('dependant' => 123, 'requireWhenEmpty' => false);
		$this -> object	-> setConfig ($cfg)
						-> setData (NULL);
		$this -> assertFalse ($this -> object -> isValid ());
	}
	
	/**
	 * If our data is required when the dependant is not empty and the dependant
	 * is not empty, our data should pass validation if it has a value. 
	 */
	public function testIsValid8 ()
	{
		$cfg	= array ('dependant' => 123, 'requireWhenEmpty' => true);
		$this -> object	-> setConfig ($cfg)
						-> setData (12345);
		$this -> assertTrue ($this -> object -> isValid ());
	}
	
	/**
	 * If our data is required when the dependant is empty and the dependant is
	 * empty, then our data should not pass validation if it doesn't have a 
	 * value. 
	 */
	public function testIsValidAgainstValidatable1 ()
	{
		$dep	= $this -> makeStubField (NULL, true);
		$cfg	= array ('dependant' => $dep, 'requireWhenEmpty' => true);
		
		$this -> object	-> setConfig ($cfg)
						-> setData (NULL);
		$this -> assertFalse ($this -> object -> isValid ());
	}
	
	/**
	 * If our data is required when the dependant is empty and the dependant is
	 * empty, then our data should pass validation if it has a value. 
	 */
	public function testIsValidAgainstValidatable2 ()
	{
		$dep	= $this -> makeStubField (NULL, true);
		$cfg	= array ('dependant' => $dep, 'requireWhenEmpty' => true);
		
		$this -> object	-> setConfig ($cfg)
						-> setData (12345);
		$this -> assertTrue ($this -> object -> isValid ());
	}
	
	/**
	 * If our data is required when the dependant is empty and the dependant is
	 * not empty, then our data should pass validation if it doesn't have a 
	 * value.
	 */
	public function testIsValidAgainstValidatable3 ()
	{
		$dep	= $this -> makeStubField (123, true);
		$cfg	= array ('dependant' => $dep, 'requireWhenEmpty' => true);
		
		$this -> object	-> setConfig ($cfg)
						-> setData (NULL);
		$this -> assertTrue ($this -> object -> isValid ());
	}
	
	/**
	 * If our data is required when the dependant is empty, and the dependant is
	 * not empty, then our data should pass validation if it has a value.
	 */
	public function testIsValidAgainstValidatable4 ()
	{
		$dep	= $this -> makeStubField (123, true);
		$cfg	= array ('dependant' => $dep, 'requireWhenEmpty' => true);
		
		$this -> object	-> setConfig ($cfg)
						-> setData (12345);
		$this -> assertTrue ($this -> object -> isValid ());
	}
	
	/**
	 * If our data is required when the dependant is not empty and the dependant
	 * is empty, our data should pass validation if it doesn't have a value. 
	 */
	public function testIsValidAgainstValidatable5 ()
	{
		$dep	= $this -> makeStubField (NULL, true);
		$cfg	= array ('dependant' => $dep, 'requireWhenEmpty' => false);
		
		$this -> object	-> setConfig ($cfg)
						-> setData (NULL);
		$this -> assertTrue ($this -> object -> isValid ());
	}
	
	/**
	 * If our data is required when the dependant is not empty and the dependant
	 * is empty, our data should pass validation if it has a value. 
	 */
	public function testIsValidAgainstValidatable6 ()
	{
		$dep	= $this -> makeStubField (NULL, true);
		$cfg	= array ('dependant' => $dep, 'requireWhenEmpty' => false);
		
		$this -> object	-> setConfig ($cfg)
						-> setData (12345);
		$this -> assertTrue ($this -> object -> isValid ());
	}
	
	/**
	 * If our data is required when the dependant is not empty and the dependant
	 * is not empty, our data should not pass validation if it doesn't have a
	 * value. 
	 */
	public function testIsValidAgainstValidatable7 ()
	{
		$dep	= $this -> makeStubField (123, true);
		$cfg	= array ('dependant' => $dep, 'requireWhenEmpty' => false);
		
		$this -> object	-> setConfig ($cfg)
						-> setData (NULL);
		$this -> assertFalse ($this -> object -> isValid ());
	}
	
	/**
	 * If our data is required when the dependant is not empty and the dependant
	 * is not empty, our data should pass validation if it has a value. 
	 */
	public function testIsValidAgainstValidatable8 ()
	{
		$dep	= $this -> makeStubField (123, true);
		$cfg	= array ('dependant' => $dep, 'requireWhenEmpty' => false);
		
		$this -> object	-> setConfig ($cfg)
						-> setData (12345);
		$this -> assertTrue ($this -> object -> isValid ());
	}
	
	/**
	 * If the dependant is a field and it doesn't validate, then our data also
	 * can't be validated
	 */
	public function testIsValidAgainstInvalidFail1 ()
	{
		$dep	= $this -> makeStubField (NULL, false);
		$cfg	= array ('dependant' => $dep, 'requireWhenEmpty' => true);
		
		$this -> object	-> setConfig ($cfg)
						-> setData (NULL);
		$this -> assertFalse ($this -> object -> isValid ());
	}
	
	/**
	 * If the dependant is a field and it doesn't validate, then our data also
	 * can't be validated
	 */
	public function testIsValidAgainstInvalidFail2 ()
	{
		$dep	= $this -> makeStubField (NULL, false);
		$cfg	= array ('dependant' => $dep, 'requireWhenEmpty' => true);
		
		$this -> object	-> setConfig ($cfg)
						-> setData (12345);
		$this -> assertFalse ($this -> object -> isValid ());
	}
	
	/**
	 * If the dependant is a field and it doesn't validate, then our data also
	 * can't be validated
	 */
	public function testIsValidAgainstInvalidFail3 ()
	{
		$dep	= $this -> makeStubField (NULL, false);
		$cfg	= array ('dependant' => $dep, 'requireWhenEmpty' => false);
		
		$this -> object	-> setConfig ($cfg)
						-> setData (NULL);
		$this -> assertFalse ($this -> object -> isValid ());
	}
	
	/**
	 * If the dependant is a field and it doesn't validate, then our data also
	 * can't be validated
	 */
	public function testIsValidAgainstInvalidFail4 ()
	{
		$dep	= $this -> makeStubField (NULL, false);
		$cfg	= array ('dependant' => $dep, 'requireWhenEmpty' => false);
		
		$this -> object	-> setConfig ($cfg)
						-> setData (12345);
		$this -> assertFalse ($this -> object -> isValid ());
	}
	
	/**
	 * Test that trying to configure with no data triggers an InvalidArgumentException
	 * 
	 * @expectedException \InvalidArgumentException
	 */
	public function testSetConfigEmptyThrowsException ()
	{
		$cfg	= array ();
		$this -> object -> setConfig ($cfg);
	}
	
	/**
	 * Test that trying to configure with no prop data triggers an InvalidArgumentException 
	 * 
	 * @expectedException \InvalidArgumentException
	 */
	public function testSetConfigNoPropsThrowsException ()
	{
		$cfg	= array ('foo' => 'bar');
		$this -> object -> setConfig ($cfg);
	}
	
	/**
	 * Test that we can create a valid configuration using a simple value as the 
	 * dependant
	 */
	public function testSetConfigPasses ()
	{
		$cfg	= array ('dependant' => 12321, 'requireWhenEmpty' => false);
		$this -> object -> setConfig ($cfg);
		$this -> assertSame ($this -> object -> getConfig (), $cfg);
	}
	
	/**
	 * Test that we can create a valid configuration using a Field object as the
	 * dependant
	 */
	public function testSetConfigPasses2 ()
	{
		$cfg	= array ('dependant' => $this -> makeStubField ('123', true), 'requireWhenEmpty' => false);
		$this -> object -> setConfig ($cfg);
		$this -> assertTrue ($this -> object -> getConfig () === $cfg);
	}
}
