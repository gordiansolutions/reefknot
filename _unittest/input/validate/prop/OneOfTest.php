<?php

namespace gordian\reefknot\input\validate\prop;

/**
 * Test class for OneOf.
 * Generated by PHPUnit on 2012-01-01 at 13:59:49.
 */
class OneOfTest extends \PHPUnit_Framework_TestCase
{

	/**
	 * @var gordian\reefknot\input\validate\prop\OneOf
	 */
	protected $object;

	/**
	 * Helper for building mock props
	 * 
	 * @param mixed $value
	 * @param bool $isValid
	 * @return gordian\reefknot\input\validate\iface\Prop 
	 */
	protected function makeStubProp ($value = NULL, $isValid = true)
	{
		$studProp	= $this -> getMockBuilder ('gordian\reefknot\input\validate\iface\Prop')
					-> disableOriginalConstructor ()
					-> getMock ();
		
		$studProp	-> expects ($this -> any ())
					-> method ('setData')
					-> will ($this -> returnValue ($studProp));
		
		$studProp	-> expects ($this -> any ())
					-> method ('getData')
					-> will ($this -> returnValue ($value));
		
		$studProp	-> expects ($this -> any ())
					-> method ('isValid')
					-> will ($this -> returnValue ($isValid));

		return ($studProp);
	}

	/**
	 * Sets up the fixture, for example, opens a network connection.
	 * This method is called before a test is executed.
	 */
	protected function setUp ()
	{
		$this -> object = new OneOf (array ('props' => array ($this -> makeStubProp (111, true))));
	}
	
	public function testIsValidNullPasses ()
	{
		$cfg	= array (
			'props'	=> array (
				$this -> makeStubProp (123, false),
				$this -> makeStubProp (456, false),
				$this -> makeStubProp (789, false)
			)
		);
		
		$this -> object	-> setConfig ($cfg)
						-> setData (NULL);
		
		$this -> assertTrue ($this -> object -> isValid ());
	}
	
	public function testIsValidOneValidPasses ()
	{
		$cfg	= array (
			'props'	=> array (
				$this -> makeStubProp (123, false),
				$this -> makeStubProp (456, false),
				$this -> makeStubProp (789, true)
			)
		);
		
		$this -> object	-> setConfig ($cfg)
						-> setData (789);
		
		$this -> assertTrue ($this -> object -> isValid ());
		
	}
	
	public function testIsValidMoreThanOneValidFails ()
	{
		$cfg	= array (
			'props'	=> array (
				$this -> makeStubProp (123, false),
				$this -> makeStubProp (456, true),
				$this -> makeStubProp (789, true)
			)
		);
		
		$this -> object	-> setConfig ($cfg)
						-> setData (123);
		
		$this -> assertFalse ($this -> object -> isValid ());
		
	}
	
	public function testIsValidAllValidFails ()
	{
		$cfg	= array (
			'props'	=> array (
				$this -> makeStubProp (123, true),
				$this -> makeStubProp (456, true),
				$this -> makeStubProp (789, true)
			)
		);
		
		$this -> object	-> setConfig ($cfg)
						-> setData (123);
		
		$this -> assertFalse ($this -> object -> isValid ());
	}
	
	public function testIsValidAlllInvalidFails ()
	{
		$cfg	= array (
			'props'	=> array (
				$this -> makeStubProp (123, false),
				$this -> makeStubProp (456, false),
				$this -> makeStubProp (789, false)
			)
		);
		
		$this -> object	-> setConfig ($cfg)
						-> setData (191);
		
		$this -> assertFalse ($this -> object -> isValid ());
	}

	/**
	 * Test that trying to configure with no data triggers an InvalidArgumentException
	 */
	public function testSetConfigEmptyThrowsException ()
	{
		$cfg		= array ();
		$exception	= NULL;
		try
		{
			$this -> object -> setConfig ($cfg);
		}
		catch (\Exception $e)
		{
			$exception	= $e;
		}
		$this -> assertInstanceOf ('\InvalidArgumentException', $exception);
		$this -> assertFalse ($this -> object -> getConfig () == $cfg);
	}
	
	/**
	 * Test that trying to configure with no prop data triggers an InvalidArgumentException 
	 */
	public function testSetConfigNoPropsThrowsException ()
	{
		$cfg		= array ('foo' => 'bar');
		$exception	= NULL;
		try
		{
			$this -> object -> setConfig ($cfg);
		}
		catch (\Exception $e)
		{
			$exception	= $e;
		}
		$this -> assertInstanceOf ('\InvalidArgumentException', $exception);
		$this -> assertFalse ($this -> object -> getConfig () == $cfg);
	}
	
	/**
	 * Test that trying to set a props with invalid data triggers an InvalidArgumentException 
	 */
	public function testSetConfigInvalidPropsThrowsException ()
	{
		$cfg		= array ('props' => pi ());
		$exception	= NULL;
		try
		{
			$this -> object -> setConfig ($cfg);
		}
		catch (\Exception $e)
		{
			$exception	= $e;
		}
		$this -> assertInstanceOf ('\InvalidArgumentException', $exception);
		$this -> assertFalse ($this -> object -> getConfig () == $cfg);
	}
	
	public function testSetConfigInvalidPropsThrowsException2 ()
	{
		$cfg		= array (
			'props' => array (
				new \stdClass (),
				new \stdClass (),
				new \stdClass ()
			)
		);
		$exception	= NULL;
		try
		{
			$this -> object -> setConfig ($cfg);
		}
		catch (\Exception $e)
		{
			$exception	= $e;
		}
		$this -> assertInstanceOf ('\InvalidArgumentException', $exception);
		$this -> assertFalse ($this -> object -> getConfig () == $cfg);
	}
	
	/**
	 * Test that trying to set an empty props triggers an InvalidArgumentException 
	 */
	public function testSetConfigEmptyNeedleThrowsException ()
	{
		$cfg		= array ('props' => array ());
		$exception	= NULL;
		try
		{
			$this -> object -> setConfig ($cfg);
		}
		catch (\Exception $e)
		{
			$exception	= $e;
		}
		$this -> assertInstanceOf ('\InvalidArgumentException', $exception);
		$this -> assertFalse ($this -> object -> getConfig () == $cfg);
	}
	
	/**
	 * Test that valid needles can be passed to the object 
	 */
	public function testSetConfigPasses ()
	{
		$cfg		= array (
			'props' => array (
				$this -> makeStubProp (123, false),
				$this -> makeStubProp (pi (), true),
				$this -> makeStubProp (array (1, 2, 3), false),
				$this -> makeStubProp ('The quick brown fox jumps over the lazy dog', true)
			)
		);
		$exception	= NULL;
		try
		{
			$this -> object -> setConfig ($cfg);
		}
		catch (\Exception $e)
		{
			$exception	= $e;
		}
		$this -> assertNull ($exception);
		$this -> assertTrue ($this -> object -> getConfig () == $cfg);
	}
}
