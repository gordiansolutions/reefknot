<?php

namespace gordian\reefknot\input\validate\prop;

/**
 * Test class for Subset.
 * Generated by PHPUnit on 2012-01-14 at 10:02:50.
 */
class SubsetTest extends \PHPUnit_Framework_TestCase
{

	/**
	 * @var gordian\reefknot\input\validate\prop\Subset
	 */
	protected $object;

	/**
	 * Sets up the fixture, for example, opens a network connection.
	 * This method is called before a test is executed.
	 */
	protected function setUp ()
	{
		$this -> object = new Subset (array ('set' => array (1, 2, 4, 8)));
	}

	/**
	 * Tears down the fixture, for example, closes a network connection.
	 * This method is called after a test is executed.
	 */
	protected function tearDown ()
	{
		
	}

	/**
	 * Test that a null value passes validation 
	 */
	public function testIsValidNullPasses ()
	{
		$this -> object -> setData (NULL);
		$this -> assertTrue ($this -> object -> isValid ());
	}
	
	/**
	 * Test that an empty set is validated as a subset of the given set
	 */
	public function testIsValidEmptyArrayPasses ()
	{
		$this -> object -> setData (array ());
		$this -> assertTrue ($this -> object -> isValid ());
	}
	
	/**
	 * Test that a set identical to the given set validates as a subset
	 */
	public function testIsValidSameArrayPasses ()
	{
		$this -> object -> setData (array (1, 2, 4, 8));
		$this -> assertTrue ($this -> object -> isValid ());
	}
	
	/**
	 * Test a typical strict subset validates as a subset
	 */
	public function testIsValidSubsetPasses ()
	{
		$this -> object -> setData (array (2, 8));
		$this -> assertTrue ($this -> object -> isValid ());
	}
	
	/**
	 * Test that a set that contains non-set members is invalid
	 */
	public function testIsValidPartialSubsetFails ()
	{
		$this -> object -> setData (array (1, 2, 3, 4));
		$this -> assertFalse ($this -> object -> isValid ());
	}
	
	/**
	 * Test that a set with no overlap at all with the given set fails validation
	 */
	public function testIsValidNoSubsetFails ()
	{
		$this -> object -> setData (array (11, 22, 44, 88));
		$this -> assertFalse ($this -> object -> isValid ());
	}
	
	/**
	 * Test that a set that's actually a superset of the given set fails validation
	 */
	public function testIsValidSupersetFails () {
		$this -> object -> setData (array (1, 2, 4, 8, 16, 32));
		$this -> assertFalse ($this -> object -> isValid ());
	}
	
	/**
	 * 
	 * @expectedException \InvalidArgumentException
	 */
	public function testIsValidNotArrayThrowsException ()
	{
		$this -> object -> setData ('Test');
		$this -> object -> isValid ();
	}
}
