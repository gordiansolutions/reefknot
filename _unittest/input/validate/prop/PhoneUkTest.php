<?php

namespace gordian\reefknot\input\validate\prop;

/**
 * Test class for PhoneUk.
 * Generated by PHPUnit on 2012-03-29 at 13:44:48.
 */
class PhoneUkTest extends \PHPUnit_Framework_TestCase
{

	/**
	 * @var PhoneUk
	 */
	protected $object;

	/**
	 * Sets up the fixture, for example, opens a network connection.
	 * This method is called before a test is executed.
	 */
	protected function setUp ()
	{
		$this -> object = new PhoneUk (array ('landline' => true));
	}

	/**
	 * Tears down the fixture, for example, closes a network connection.
	 * This method is called after a test is executed.
	 */
	protected function tearDown ()
	{
		
	}

	public function testIsValidNullPass ()
	{
		$this -> object -> setData (NULL);
		$this -> assertTrue ($this -> object -> isValid ());
	}

	public function testIsValidAnyPass ()
	{
		$this -> object -> setConfig (array (
			'landline'	=> true,
			'national'	=> true,
			'corp'		=> true,
			'mobile'	=> true,
			'special'	=> true,
			'premium'	=> true
		));

		// Landlines
		$this -> object -> setData ('+441612223333');
		$this -> assertTrue ($this -> object -> isValid ());
		$this -> object -> setData ('01612223333');
		$this -> assertTrue ($this -> object -> isValid ());
		$this -> object -> setData ('+442612223333');
		$this -> assertTrue ($this -> object -> isValid ());
		$this -> object -> setData ('02612223333');
		$this -> assertTrue ($this -> object -> isValid ());

		// National
		$this -> object -> setData ('+443612223333');
		$this -> assertTrue ($this -> object -> isValid ());
		$this -> object -> setData ('03612223333');
		$this -> assertTrue ($this -> object -> isValid ());

		// Corp
		$this -> object -> setData ('+445612223333');
		$this -> assertTrue ($this -> object -> isValid ());
		$this -> object -> setData ('05612223333');
		$this -> assertTrue ($this -> object -> isValid ());

		// Mobile
		$this -> object -> setData ('+447612223333');
		$this -> assertTrue ($this -> object -> isValid ());
		$this -> object -> setData ('07612223333');
		$this -> assertTrue ($this -> object -> isValid ());

		// Special
		$this -> object -> setData ('+448612223333');
		$this -> assertTrue ($this -> object -> isValid ());
		$this -> object -> setData ('08612223333');
		$this -> assertTrue ($this -> object -> isValid ());

		// Premium
		$this -> object -> setData ('+449612223333');
		$this -> assertTrue ($this -> object -> isValid ());
		$this -> object -> setData ('09612223333');
		$this -> assertTrue ($this -> object -> isValid ());
	}

	public function testIsValidAnyFailNotNumber ()
	{
		$this -> object -> setConfig (array (
			'landline'	=> true,
			'national'	=> true,
			'corp'		=> true,
			'mobile'	=> true,
			'special'	=> true,
			'premium'	=> true
		));

		$this -> object -> setData ('abcdefghij');
		$this -> assertFalse ($this -> object -> isValid ());
	}

	public function testIsValidAnyFailInvalidNumber ()
	{
		$this -> object -> setConfig (array (
			'landline'	=> true,
			'national'	=> true,
			'corp'		=> true,
			'mobile'	=> true,
			'special'	=> true,
			'premium'	=> true
		));

		// 4 is reserved
		$this -> object -> setData ('+444612223333');
		$this -> assertFalse ($this -> object -> isValid ());
		$this -> object -> setData ('04612223333');
		$this -> assertFalse ($this -> object -> isValid ());

		// 6 is reserved
		$this -> object -> setData ('+446612223333');
		$this -> assertFalse ($this -> object -> isValid ());
		$this -> object -> setData ('06612223333');
		$this -> assertFalse ($this -> object -> isValid ());
	}

	public function testIsValidAnyFailWhitespace ()
	{
		$this -> object -> setConfig (array (
			'landline'	=> true,
			'national'	=> true,
			'corp'		=> true,
			'mobile'	=> true,
			'special'	=> true,
			'premium'	=> true
		));

		$this -> object -> setData ('+44 161 222 3333');
		$this -> assertFalse ($this -> object -> isValid ());
		$this -> object -> setData ('0161 222 3333');
		$this -> assertFalse ($this -> object -> isValid ());
	}

	public function testIsValidAnyFailTooShort ()
	{
		$this -> object -> setConfig (array (
			'landline'	=> true,
			'national'	=> true,
			'corp'		=> true,
			'mobile'	=> true,
			'special'	=> true,
			'premium'	=> true
		));

		$this -> object -> setData ('+44161222');
		$this -> assertFalse ($this -> object -> isValid ());
		$this -> object -> setData ('0161222');
		$this -> assertFalse ($this -> object -> isValid ());
	}

	public function testIsValidAnyFailTooLong ()
	{
		$this -> object -> setConfig (array (
			'landline'	=> true,
			'national'	=> true,
			'corp'		=> true,
			'mobile'	=> true,
			'special'	=> true,
			'premium'	=> true
		));

		$this -> object -> setData ('+441612223333444');
		$this -> assertFalse ($this -> object -> isValid ());
		$this -> object -> setData ('01612223333444');
		$this -> assertFalse ($this -> object -> isValid ());
	}

	/**
	 */
	public function testIsValidLandlinePass ()
	{
		$this -> object -> setConfig (array ('landline' => true));

		$this -> object -> setData ('+441612223333');
		$this -> assertTrue ($this -> object -> isValid ());
		$this -> object -> setData ('01612223333');
		$this -> assertTrue ($this -> object -> isValid ());
		$this -> object -> setData ('+442612223333');
		$this -> assertTrue ($this -> object -> isValid ());
		$this -> object -> setData ('02612223333');
		$this -> assertTrue ($this -> object -> isValid ());
	}

	public function testIsValidLandlineFail ()
	{
		$this -> object -> setConfig (array ('landline' => true));

		$this -> object -> setData ('+443612223333');
		$this -> assertFalse ($this -> object -> isValid ());
		$this -> object -> setData ('03612223333');
		$this -> assertFalse ($this -> object -> isValid ());

		$this -> object -> setData ('+445612223333');
		$this -> assertFalse ($this -> object -> isValid ());
		$this -> object -> setData ('05612223333');
		$this -> assertFalse ($this -> object -> isValid ());

		$this -> object -> setData ('+447612223333');
		$this -> assertFalse ($this -> object -> isValid ());
		$this -> object -> setData ('07612223333');
		$this -> assertFalse ($this -> object -> isValid ());

		$this -> object -> setData ('+448612223333');
		$this -> assertFalse ($this -> object -> isValid ());
		$this -> object -> setData ('08612223333');
		$this -> assertFalse ($this -> object -> isValid ());

		$this -> object -> setData ('+449612223333');
		$this -> assertFalse ($this -> object -> isValid ());
		$this -> object -> setData ('09612223333');
		$this -> assertFalse ($this -> object -> isValid ());
	}

	public function testIsValidNationalPass ()
	{
		$this -> object -> setConfig (array ('national' => true));

		$this -> object -> setData ('+443612223333');
		$this -> assertTrue ($this -> object -> isValid ());
		$this -> object -> setData ('03612223333');
		$this -> assertTrue ($this -> object -> isValid ());
	}

	public function testIsValidNationalFail ()
	{
		$this -> object -> setConfig (array ('national' => true));

		$this -> object -> setData ('+441612223333');
		$this -> assertFalse ($this -> object -> isValid ());
		$this -> object -> setData ('01612223333');
		$this -> assertFalse ($this -> object -> isValid ());
		$this -> object -> setData ('+442612223333');
		$this -> assertFalse ($this -> object -> isValid ());
		$this -> object -> setData ('02612223333');
		$this -> assertFalse ($this -> object -> isValid ());

		$this -> object -> setData ('+445612223333');
		$this -> assertFalse ($this -> object -> isValid ());
		$this -> object -> setData ('05612223333');
		$this -> assertFalse ($this -> object -> isValid ());

		$this -> object -> setData ('+447612223333');
		$this -> assertFalse ($this -> object -> isValid ());
		$this -> object -> setData ('07612223333');
		$this -> assertFalse ($this -> object -> isValid ());

		$this -> object -> setData ('+448612223333');
		$this -> assertFalse ($this -> object -> isValid ());
		$this -> object -> setData ('08612223333');
		$this -> assertFalse ($this -> object -> isValid ());

		$this -> object -> setData ('+449612223333');
		$this -> assertFalse ($this -> object -> isValid ());
		$this -> object -> setData ('09612223333');
		$this -> assertFalse ($this -> object -> isValid ());
	}

	public function testIsValidCorpPass ()
	{
		$this -> object -> setConfig (array ('corp' => true));

		$this -> object -> setData ('+445612223333');
		$this -> assertTrue ($this -> object -> isValid ());
		$this -> object -> setData ('05612223333');
		$this -> assertTrue ($this -> object -> isValid ());
	}

	public function testIsValidCorpFail ()
	{
		$this -> object -> setConfig (array ('corp' => true));

		$this -> object -> setData ('+441612223333');
		$this -> assertFalse ($this -> object -> isValid ());
		$this -> object -> setData ('01612223333');
		$this -> assertFalse ($this -> object -> isValid ());
		$this -> object -> setData ('+442612223333');
		$this -> assertFalse ($this -> object -> isValid ());
		$this -> object -> setData ('02612223333');
		$this -> assertFalse ($this -> object -> isValid ());

		$this -> object -> setData ('+443612223333');
		$this -> assertFalse ($this -> object -> isValid ());
		$this -> object -> setData ('03612223333');
		$this -> assertFalse ($this -> object -> isValid ());

		$this -> object -> setData ('+447612223333');
		$this -> assertFalse ($this -> object -> isValid ());
		$this -> object -> setData ('07612223333');
		$this -> assertFalse ($this -> object -> isValid ());

		$this -> object -> setData ('+448612223333');
		$this -> assertFalse ($this -> object -> isValid ());
		$this -> object -> setData ('08612223333');
		$this -> assertFalse ($this -> object -> isValid ());

		$this -> object -> setData ('+449612223333');
		$this -> assertFalse ($this -> object -> isValid ());
		$this -> object -> setData ('09612223333');
		$this -> assertFalse ($this -> object -> isValid ());
	}

	public function testIsValidMobilePass ()
	{
		$this -> object -> setConfig (array ('mobile' => true));

		$this -> object -> setData ('+447612223333');
		$this -> assertTrue ($this -> object -> isValid ());
		$this -> object -> setData ('07612223333');
		$this -> assertTrue ($this -> object -> isValid ());
	}

	public function testIsValidMobileFail ()
	{
		$this -> object -> setConfig (array ('mobile' => true));

		$this -> object -> setData ('+441612223333');
		$this -> assertFalse ($this -> object -> isValid ());
		$this -> object -> setData ('01612223333');
		$this -> assertFalse ($this -> object -> isValid ());
		$this -> object -> setData ('+442612223333');
		$this -> assertFalse ($this -> object -> isValid ());
		$this -> object -> setData ('02612223333');
		$this -> assertFalse ($this -> object -> isValid ());

		$this -> object -> setData ('+443612223333');
		$this -> assertFalse ($this -> object -> isValid ());
		$this -> object -> setData ('03612223333');
		$this -> assertFalse ($this -> object -> isValid ());

		$this -> object -> setData ('+445612223333');
		$this -> assertFalse ($this -> object -> isValid ());
		$this -> object -> setData ('05612223333');
		$this -> assertFalse ($this -> object -> isValid ());

		$this -> object -> setData ('+448612223333');
		$this -> assertFalse ($this -> object -> isValid ());
		$this -> object -> setData ('08612223333');
		$this -> assertFalse ($this -> object -> isValid ());

		$this -> object -> setData ('+449612223333');
		$this -> assertFalse ($this -> object -> isValid ());
		$this -> object -> setData ('09612223333');
		$this -> assertFalse ($this -> object -> isValid ());
	}

	public function testIsValidSpecialPass ()
	{
		$this -> object -> setConfig (array ('special' => true));

		$this -> object -> setData ('+448612223333');
		$this -> assertTrue ($this -> object -> isValid ());
		$this -> object -> setData ('08612223333');
		$this -> assertTrue ($this -> object -> isValid ());
	}

	public function testIsValidSpecialFail ()
	{
		$this -> object -> setConfig (array ('special' => true));

		$this -> object -> setData ('+441612223333');
		$this -> assertFalse ($this -> object -> isValid ());
		$this -> object -> setData ('01612223333');
		$this -> assertFalse ($this -> object -> isValid ());
		$this -> object -> setData ('+442612223333');
		$this -> assertFalse ($this -> object -> isValid ());
		$this -> object -> setData ('02612223333');
		$this -> assertFalse ($this -> object -> isValid ());

		$this -> object -> setData ('+443612223333');
		$this -> assertFalse ($this -> object -> isValid ());
		$this -> object -> setData ('03612223333');
		$this -> assertFalse ($this -> object -> isValid ());

		$this -> object -> setData ('+445612223333');
		$this -> assertFalse ($this -> object -> isValid ());
		$this -> object -> setData ('05612223333');
		$this -> assertFalse ($this -> object -> isValid ());

		$this -> object -> setData ('+447612223333');
		$this -> assertFalse ($this -> object -> isValid ());
		$this -> object -> setData ('07612223333');
		$this -> assertFalse ($this -> object -> isValid ());

		$this -> object -> setData ('+449612223333');
		$this -> assertFalse ($this -> object -> isValid ());
		$this -> object -> setData ('09612223333');
		$this -> assertFalse ($this -> object -> isValid ());
	}

	public function testIsValidPremiumPass ()
	{
		$this -> object -> setConfig (array ('premium' => true));

		$this -> object -> setData ('+449612223333');
		$this -> assertTrue ($this -> object -> isValid ());
		$this -> object -> setData ('09612223333');
		$this -> assertTrue ($this -> object -> isValid ());
	}

	public function testIsValidPremiumFail ()
	{
		$this -> object -> setConfig (array ('premium' => true));

		$this -> object -> setData ('+441612223333');
		$this -> assertFalse ($this -> object -> isValid ());
		$this -> object -> setData ('01612223333');
		$this -> assertFalse ($this -> object -> isValid ());
		$this -> object -> setData ('+442612223333');
		$this -> assertFalse ($this -> object -> isValid ());
		$this -> object -> setData ('02612223333');
		$this -> assertFalse ($this -> object -> isValid ());

		$this -> object -> setData ('+443612223333');
		$this -> assertFalse ($this -> object -> isValid ());
		$this -> object -> setData ('03612223333');
		$this -> assertFalse ($this -> object -> isValid ());

		$this -> object -> setData ('+445612223333');
		$this -> assertFalse ($this -> object -> isValid ());
		$this -> object -> setData ('05612223333');
		$this -> assertFalse ($this -> object -> isValid ());

		$this -> object -> setData ('+447612223333');
		$this -> assertFalse ($this -> object -> isValid ());
		$this -> object -> setData ('07612223333');
		$this -> assertFalse ($this -> object -> isValid ());

		$this -> object -> setData ('+448612223333');
		$this -> assertFalse ($this -> object -> isValid ());
		$this -> object -> setData ('08612223333');
		$this -> assertFalse ($this -> object -> isValid ());
	}
	
	public function testIsValidNotStringThrowsException ()
	{
		$exception	= NULL;
		$this -> object -> setData (441612223333);
		
		try
		{
			$this -> object -> isValid ();
		}
		catch (\Exception $e)
		{
			$exception	= $e;
		}
		
		$this -> assertInstanceOf ('\InvalidArgumentException', $exception);
	}
	
	public function testSetConfigEmptyCfgThrowsException ()
	{
		$exception	= NULL;
		
		try
		{
			$this -> object -> setConfig (array ());
		}
		catch (\Exception $e)
		{
			$exception	= $e;
		}
		
		$this -> assertInstanceOf ('\InvalidArgumentException', $exception);
		$this -> assertEquals ($this -> object -> getConfig (), array (
			'landline'	=> true,
			'national'	=> false,
			'corp'		=> false,
			'mobile'	=> false,
			'special'	=> false,
			'premium'	=> false
		));
	}
	
	public function testSetConfigInvalidCfgThrowsException ()
	{
		$exception	= NULL;
		
		try
		{
			$this -> object -> setConfig (array ('landline' => false));
		}
		catch (\Exception $e)
		{
			$exception	= $e;
		}
		
		$this -> assertInstanceOf ('\InvalidArgumentException', $exception);
		$this -> assertEquals ($this -> object -> getConfig (), array (
			'landline'	=> true,
			'national'	=> false,
			'corp'		=> false,
			'mobile'	=> false,
			'special'	=> false,
			'premium'	=> false
		));
	}
}
