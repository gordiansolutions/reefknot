<?php

namespace gordian\reefknot\input\validate\prop;

function alwaysTrue ($data)
{
	return (true);
}

function alwaysFalse ($data)
{
	return (false);
}

function withArgs ($data, $arg1, $arg2)
{
	return (($arg1 == 1) && ($arg2 == 2) && ($data == ($arg1 + $arg2)));
}

class Callbacks
{
	static public function alwaysTrue ($data)
	{
		return (true);
	}
	
	static public function alwaysFalse ($data)
	{
		return (false);
	}
	
	public function instanceTrue ($data)
	{
		return (true);
	}
	
	public function instanceFalse ($false)
	{
		return (false);
	}
}

/**
 * Test class for Callback.
 * Generated by PHPUnit on 2012-01-01 at 13:59:48.
 */
class CallbackTest extends \PHPUnit_Framework_TestCase
{

	/**
	 * @var gordian\reefknot\input\validate\prop\Callback
	 */
	protected $object;
	
	/**
	 * Sets up the fixture, for example, opens a network connection.
	 * This method is called before a test is executed.
	 */
	protected function setUp ()
	{
		$this -> object = new Callback (array ('callback' => __NAMESPACE__ . '\alwaysTrue'));
	}

	/**
	 * Tears down the fixture, for example, closes a network connection.
	 * This method is called after a test is executed.
	 */
	protected function tearDown ()
	{
		
	}
	
	public function testIsValidNullPasses ()
	{
		$this -> object	-> setData (NULL);
		$this -> assertTrue ($this -> object -> isValid ());
	}
	
	public function testIsValidFunctionTruePasses ()
	{
		$cfg	= array (
			'callback'	=> __NAMESPACE__ . '\alwaysTrue'
		);
		
		$this -> object	-> setConfig ($cfg) 
						-> setData (123);
		$this -> assertTrue ($this -> object -> isValid ());
	}
	
	public function testIsValidFunctionFalseFails ()
	{
		$cfg	= array (
			'callback'	=> __NAMESPACE__ . '\alwaysFalse'
		);
		
		$this -> object	-> setConfig ($cfg) 
						-> setData (123);
		$this -> assertFalse ($this -> object -> isValid ());
	}
	
	public function testIsValidAnonTruePasses ()
	{
		$cfg	= array (
			'callback'	=> function () { return (true);}
		);
		
		$this -> object	-> setConfig ($cfg) 
						-> setData (123);
		$this -> assertTrue ($this -> object -> isValid ());
	}
	
	public function testIsValidAnonFalseFails ()
	{
		$cfg	= array (
			'callback'	=> function () { return (false);}
		);
		
		$this -> object	-> setConfig ($cfg) 
						-> setData (123);
		$this -> assertFalse ($this -> object -> isValid ());
	}
	
	public function testIsValidStaticTruePasses ()
	{
		$cfg	= array (
			'callback'	=> __NAMESPACE__ . '\Callbacks::alwaysTrue'
		);
		
		$this -> object	-> setConfig ($cfg) 
						-> setData (123);
		$this -> assertTrue ($this -> object -> isValid ());
	}
	
	public function testIsValidStaticFalseFails ()
	{
		$cfg	= array (
			'callback'	=> __NAMESPACE__ . '\Callbacks::alwaysFalse'
		);
		
		$this -> object	-> setConfig ($cfg) 
						-> setData (123);
		$this -> assertFalse ($this -> object -> isValid ());
	}
	
	public function testIsValidStaticTruePasses2 ()
	{
		$cfg	= array (
			'callback'	=> array (__NAMESPACE__ . '\Callbacks', 'alwaysTrue')
		);
		
		$this -> object	-> setConfig ($cfg) 
						-> setData (123);
		$this -> assertTrue ($this -> object -> isValid ());
	}
	
	public function testIsValidStaticFalseFails2 ()
	{
		$cfg	= array (
			'callback'	=> array (__NAMESPACE__ . '\Callbacks', 'alwaysFalse')
		);
		
		$this -> object	-> setConfig ($cfg) 
						-> setData (123);
		$this -> assertFalse ($this -> object -> isValid ());
	}
	
	public function testIsValidInstanceTruePasses ()
	{
		$obj	= new Callbacks;
		$cfg	= array (
			'callback'	=> array ($obj, 'instanceTrue')
		);
		
		$this -> object	-> setConfig ($cfg) 
						-> setData (123);
		$this -> assertTrue ($this -> object -> isValid ());
	}
	
	public function testIsValidInstanceFalseFails ()
	{
		$obj	= new Callbacks;
		$cfg	= array (
			'callback'	=> array ($obj, 'instanceFalse')
		);
		
		$this -> object	-> setConfig ($cfg) 
						-> setData (123);
		$this -> assertFalse ($this -> object -> isValid ());
	}
	
	public function testIsValidWithArgsTruePasses ()
	{
		$cfg	= array (
			'callback'	=> __NAMESPACE__ . '\withArgs',
			'args'		=> array (1, 2)
		);
		
		$this -> object	-> setConfig ($cfg) 
						-> setData (3);
		$this -> assertTrue ($this -> object -> isValid ());
	}
	
	public function testIsValidWithArgsFalseFails ()
	{
		$cfg	= array (
			'callback'	=> __NAMESPACE__ . '\withArgs',
			'args'		=> array (2, 1)
		);
		
		$this -> object	-> setConfig ($cfg) 
						-> setData (3);
		$this -> assertFalse ($this -> object -> isValid ());
	}

	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	public function testSetConfigEmptyThrowsException ()
	{
		$cfg		= array ();
		$exception	= NULL;
		try
		{
			$this -> object -> setConfig ($cfg);
		}
		catch (\Exception $e)
		{
			$exception	= $e;
		}
		$this -> assertInstanceOf ('\InvalidArgumentException', $exception);
		$this -> assertFalse ($this -> object -> getConfig () == $cfg);
	}
	
	public function testSetConfigNoPropsThrowsException ()
	{
		$cfg		= array ('foo' => 'bar');
		$exception	= NULL;
		try
		{
			$this -> object -> setConfig ($cfg);
		}
		catch (\Exception $e)
		{
			$exception	= $e;
		}
		$this -> assertInstanceOf ('\InvalidArgumentException', $exception);
		$this -> assertFalse ($this -> object -> getConfig () == $cfg);
	}
	
	public function testSetConfigInvalidPropsThrowsException ()
	{
		$cfg		= array ('callback' => pi ());
		$exception	= NULL;
		try
		{
			$this -> object -> setConfig ($cfg);
		}
		catch (\Exception $e)
		{
			$exception	= $e;
		}
		$this -> assertInstanceOf ('\InvalidArgumentException', $exception);
		$this -> assertFalse ($this -> object -> getConfig () == $cfg);
	}
	
	public function testSetConfigInvalidPropsThrowsException2 ()
	{
		$cfg		= array (
			'callback'	=> __NAMESPACE__ . '\alwaysFalse',
			'args'		=> pi ()
		);
		$exception	= NULL;
		try
		{
			$this -> object -> setConfig ($cfg);
		}
		catch (\Exception $e)
		{
			$exception	= $e;
		}
		$this -> assertInstanceOf ('\InvalidArgumentException', $exception);
		$this -> assertFalse ($this -> object -> getConfig () == $cfg);
	}
	
	public function testSetConfigPasses ()
	{
		$cfg		= array (
			'callback'	=> __NAMESPACE__ . '\alwaysFalse',
		);
		$exception	= NULL;
		try
		{
			$this -> object -> setConfig ($cfg);
		}
		catch (\Exception $e)
		{
			$exception	= $e;
		}
		$this -> assertNull ($exception);
		$this -> assertTrue ($this -> object -> getConfig () == $cfg);
	}
	
	public function testSetConfigPasses2 ()
	{
		$cfg		= array (
			'callback'	=> __NAMESPACE__ . '\withArgs',
			'args'		=> array (2, 1)
		);
		$exception	= NULL;
		try
		{
			$this -> object -> setConfig ($cfg);
		}
		catch (\Exception $e)
		{
			$exception	= $e;
		}
		$this -> assertNull ($exception);
		$this -> assertTrue ($this -> object -> getConfig () == $cfg);
	}
}
