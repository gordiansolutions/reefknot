<?php

namespace gordian\reefknot\input\validate\prop;

require_once dirname (__FILE__) . '/../../../../input/validate/prop/Email.php';

/**
 * Test class for Email.
 * Generated by PHPUnit on 2011-12-13 at 12:37:28.
 */
class EmailTest extends \PHPUnit_Framework_TestCase
{

	/**
	 * @var gordian\reefknot\input\validate\prop\Email
	 */
	protected $object;

	/**
	 * Sets up the fixture, for example, opens a network connection.
	 * This method is called before a test is executed.
	 */
	protected function setUp ()
	{
		$this -> object = new Email;
	}

	/**
	 * Tears down the fixture, for example, closes a network connection.
	 * This method is called after a test is executed.
	 */
	protected function tearDown ()
	{
		
	}

	/**
	 * @todo Implement testIsValid().
	 */
	public function testIsValidNullPasses ()
	{
		$this -> object -> setData (NULL);
		$this -> assertTrue ($this -> object -> isValid ());
	}
	
	public function testIsValidGoodAddrPasses ()
	{
		$this -> object -> setData ('test@example.com');
		$this -> assertTrue ($this -> object -> isValid ());
	}
	
	public function testIsValidGoodAddrPasses9 ()
	{
		/* 
		 * According to Wikipedia this is a valid email address, but it fails.  
		 * Either the address isn't valid or there's a bug in the email 
		 * validator
		 */
		$this -> object -> setData ('Abc\@def@example.com');
		$this -> assertTrue ($this -> object -> isValid ());
	}
	
	public function testIsValidGoodAddrPasses2 ()
	{
		$this -> object -> setData ('customer/department=shipping@example.com');
		$this -> assertTrue ($this -> object -> isValid ());
	}
	
	public function testIsValidGoodAddrPasses3 ()
	{
		$this -> object -> setData ('!def!xyz%abc@example.com');
		$this -> assertTrue ($this -> object -> isValid ());
	}
	
	public function testIsValidGoodAddrPasses4 ()
	{
		$this -> object -> setData ('a.little.unusual@example.com');
		$this -> assertTrue ($this -> object -> isValid ());
	}
	
	public function testIsValidGoodAddrPasses5 ()
	{
		$this -> object -> setData ('a.little.more.unusual@dept.example.com');
		$this -> assertTrue ($this -> object -> isValid ());
	}
	
	public function testIsValidGoodAddrPasses6 ()
	{
		$this -> object -> setData ('much."more\ unusual"@example.com');
		$this -> assertTrue ($this -> object -> isValid ());
	}
	
	public function testIsValidGoodAddrPasses7 ()
	{
		$this -> object -> setData ('very.unusual."@".unusual.com@example.com');
		$this -> assertTrue ($this -> object -> isValid ());
	}
	
	public function testIsValidGoodAddrPasses8 ()
	{
		/* 
		 * According to Wikipedia this is a valid email address, but it fails.  
		 * Either the address isn't valid or there's a bug in the email 
		 * validator
		 */
		$this -> object -> setData ('very."(),:;<>[]".VERY."very\\\ \@\"very".unusual@strange.example.com');
		$this -> assertTrue ($this -> object -> isValid ());
	}
	
	public function testIsValidBadAddrFails ()
	{
		$this -> object -> setData ('');
		$this -> assertFalse ($this -> object -> isValid ());
	}
	
	public function testIsValidBadAddrFails2 ()
	{
		$this -> object -> setData ('Abc.example.com');
		$this -> assertFalse ($this -> object -> isValid ());
	}
	
	public function testIsValidBadAddrFails3 ()
	{
		$this -> object -> setData ('"(),:;<>[\]@example.com');
		$this -> assertFalse ($this -> object -> isValid ());
	}
	
	public function testIsValidBadAddrFails4 ()
	{
		$this -> object -> setData ('just"not"right@example.com');
		$this -> assertFalse ($this -> object -> isValid ());
	}
	
	public function testIsValidBadAddrFails5 ()
	{
		$this -> object -> setData ('A@b@c@example.com');
		$this -> assertFalse ($this -> object -> isValid ());
	}
	
	public function testIsValidBadAddrFails6 ()
	{
		$this -> object -> setData ('this\ is\"really\"not\\allowed@example.com');
		$this -> assertFalse ($this -> object -> isValid ());
	}
	
	public function testIsValidWrongTypeThrowsException ()
	{
		$exception	= NULL;
		$this -> object -> setData (new \stdClass ());
		try 
		{
			$this -> object -> isValid ();
		}
		catch (\Exception $e)
		{
			$exception	= $e;
		}
		$this -> assertTrue ($exception instanceof \InvalidArgumentException);
	}
}

