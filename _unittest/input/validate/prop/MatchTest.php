<?php

namespace gordian\reefknot\input\validate\prop;

/**
 * Test class for Match.
 * Generated by PHPUnit on 2011-12-13 at 12:37:28.
 */
class MatchTest extends \PHPUnit_Framework_TestCase
{

	/**
	 * @var gordian\reefknot\input\validate\prop\Match
	 */
	protected $object;

	/**
	 * Sets up the fixture, for example, opens a network connection.
	 * This method is called before a test is executed.
	 */
	protected function setUp ()
	{
		$this -> object = new Match (array ('needle' => 'ThE qUiCk BrOwN fOx JuMpS oVeR tHe LaZy DoG.'));
	}

	/**
	 * Tears down the fixture, for example, closes a network connection.
	 * This method is called after a test is executed.
	 */
	protected function tearDown ()
	{
		
	}

	/**
	 * Test that a null value passes validation 
	 */
	public function testIsValidNullPasses ()
	{
		$this -> object -> setData (NULL);
		$this -> assertTrue ($this -> object -> isValid ());
	}
	
	public function testIsValidInHaystackPasses ()
	{
		$this -> object -> setData ('ThE qUiCk BrOwN fOx JuMpS oVeR tHe LaZy DoG.');
		$this -> assertTrue ($this -> object -> isValid ());
		$this -> object -> setData (' ThE qUiCk BrOwN fOx JuMpS oVeR tHe LaZy DoG.');
		$this -> assertTrue ($this -> object -> isValid ());
		$this -> object -> setData ('ThE qUiCk BrOwN fOx JuMpS oVeR tHe LaZy DoG. ');
		$this -> assertTrue ($this -> object -> isValid ());
		$this -> object -> setData (' ThE qUiCk BrOwN fOx JuMpS oVeR tHe LaZy DoG. ');
		$this -> assertTrue ($this -> object -> isValid ());
		$this -> object -> setData ('Vivamus ornare dapibus ultricies. Ut quis tellus enim. Quisque mauris felis, tempus ullamcorper commodo non; elementum nec arcu. Ut nisl libero, ornare sed ornare eu, lobortis id sapien. In sollicitudin tortor feugiat erat iaculis vel molestie libero molestie! Praesent malesuada, nunc quis sagittis elementum, odio risus facilisis diam, ac pharetra magna tortor vitae orci? Ut volutpat malesuada laoreet. Sed volutpat, lacus at iaculis ullamcorper; elit nisi ultrices dolor, et vestibulum justo elit in turpis. ThE qUiCk BrOwN fOx JuMpS oVeR tHe LaZy DoG. In et sem arcu, bibendum porttitor augue. Sed vitae diam mattis elit euismod vulputate. Fusce non nibh erat; a porta felis? Morbi suscipit rhoncus sagittis. Phasellus dui quam, vestibulum non sagittis non, posuere quis sem? Nullam non est nisl. Suspendisse potenti. Donec laoreet, augue vitae suscipit ornare, justo tellus fringilla felis, ac lacinia leo tellus quis magna. Nullam fermentum, nisi ut ultrices lacinia, urna mi faucibus sapien, sit amet semper ante diam a nisl. Phasellus pharetra odio ac magna euismod vestibulum. Nam fringilla neque sit amet ligula aliquet ac molestie nulla vulputate. Cras faucibus dignissim sem eget adipiscing. Nulla vehicula, est ut elementum sodales, massa enim rhoncus tortor, vitae pharetra lacus nisi vel nulla. Mauris fermentum dui id leo tincidunt rutrum. Curabitur rhoncus commodo tellus nec dignissim. ');
		$this -> assertTrue ($this -> object -> isValid ());
	}
	
	public function testIsValidNotInHaystackFails ()
	{
		$this -> object -> setData ('The quick brown fox jumps over the lazy dog.');
		$this -> assertFalse ($this -> object -> isValid ());
		$this -> object -> setData ('THE QUICK BROWN FOX JUMPS OVER THE LAZY DOG.');
		$this -> assertFalse ($this -> object -> isValid ());
		$this -> object -> setData ('Jackdaws love my big sphinx of quartz.');
		$this -> assertFalse ($this -> object -> isValid ());
	}
	
	/**
	 * Test that trying to give the object data it can't test throws an InvalidArgumentException 
	 */
	public function testIsValidArrayThrowsException ()
	{
		$exception	= NULL;
		$this -> object -> setData (array (1, 2, 3));
		try 
		{
			$this -> object -> isValid ();
		}
		catch (\Exception $e)
		{
			$exception	= $e;
		}
		$this -> assertInstanceOf ('\InvalidArgumentException', $exception);
	}
	
	/**
	 * Test that trying to give the object data it can't test throws an InvalidArgumentException 
	 */
	public function testIsValidAssocThrowsException ()
	{
		$exception	= NULL;
		$this -> object -> setData (array ('a' => 1, 'b' => 2, 'c' => 3));
		try 
		{
			$this -> object -> isValid ();
		}
		catch (\Exception $e)
		{
			$exception	= $e;
		}
		$this -> assertInstanceOf ('\InvalidArgumentException', $exception);
	}
	
	/**
	 * Test that trying to give the object data it can't test throws an InvalidArgumentException 
	 */
	public function testIsValidBoolThrowsException ()
	{
		$exception	= NULL;
		$this -> object -> setData (true);
		try 
		{
			$this -> object -> isValid ();
		}
		catch (\Exception $e)
		{
			$exception	= $e;
		}
		$this -> assertInstanceOf ('\InvalidArgumentException', $exception);
	}
	
	/**
	 * Test that trying to give the object data it can't test throws an InvalidArgumentException 
	 */
	public function testIsValidFloatThrowsException ()
	{
		$exception	= NULL;
		$this -> object -> setData (pi ());
		try 
		{
			$this -> object -> isValid ();
		}
		catch (\Exception $e)
		{
			$exception	= $e;
		}
		$this -> assertInstanceOf ('\InvalidArgumentException', $exception);
	}
	
	/**
	 * Test that trying to give the object data it can't test throws an InvalidArgumentException 
	 */
	public function testIsValidIntThrowsException ()
	{
		$exception	= NULL;
		$this -> object -> setData (42);
		try 
		{
			$this -> object -> isValid ();
		}
		catch (\Exception $e)
		{
			$exception	= $e;
		}
		$this -> assertInstanceOf ('\InvalidArgumentException', $exception);
	}
	
	/**
	 * Test that trying to give the object data it can't test throws an InvalidArgumentException 
	 */
	public function testIsValidObjectThrowsException ()
	{
		$exception	= NULL;
		$this -> object -> setData (new \stdClass ());
		try 
		{
			$this -> object -> isValid ();
		}
		catch (\Exception $e)
		{
			$exception	= $e;
		}
		$this -> assertInstanceOf ('\InvalidArgumentException', $exception);
	}
	
	/**
	 * Test that trying to configure with no data triggers an InvalidArgumentException
	 */
	public function testSetConfigEmptyThrowsException ()
	{
		$cfg		= array ();
		$exception	= NULL;
		try
		{
			$this -> object -> setConfig ($cfg);
		}
		catch (\Exception $e)
		{
			$exception	= $e;
		}
		$this -> assertInstanceOf ('\InvalidArgumentException', $exception);
		$this -> assertFalse ($this -> object -> getConfig () == $cfg);
	}
	
	/**
	 * Test that trying to configure with no needle data triggers an InvalidArgumentException 
	 */
	public function testSetConfigNoNeedleThrowsException ()
	{
		$cfg		= array ('foo' => 'bar');
		$exception	= NULL;
		try
		{
			$this -> object -> setConfig ($cfg);
		}
		catch (\Exception $e)
		{
			$exception	= $e;
		}
		$this -> assertInstanceOf ('\InvalidArgumentException', $exception);
		$this -> assertFalse ($this -> object -> getConfig () == $cfg);
	}
	
	/**
	 * Test that trying to set a needle with invalid data triggers an InvalidArgumentException 
	 */
	public function testSetConfigInvalidNeedlehrowsException ()
	{
		$cfg		= array ('needle' => pi ());
		$exception	= NULL;
		try
		{
			$this -> object -> setConfig ($cfg);
		}
		catch (\Exception $e)
		{
			$exception	= $e;
		}
		$this -> assertInstanceOf ('\InvalidArgumentException', $exception);
		$this -> assertFalse ($this -> object -> getConfig () == $cfg);
	}
	
	/**
	 * Test that trying to set an empty needle triggers an InvalidArgumentException 
	 */
	public function testSetConfigEmptyNeedleThrowsException ()
	{
		$cfg		= array ('needle' => '');
		$exception	= NULL;
		try
		{
			$this -> object -> setConfig ($cfg);
		}
		catch (\Exception $e)
		{
			$exception	= $e;
		}
		$this -> assertInstanceOf ('\InvalidArgumentException', $exception);
		$this -> assertFalse ($this -> object -> getConfig () == $cfg);
	}
	
	/**
	 * Test that valid needles can be passed to the object 
	 */
	public function testSetConfigPasses ()
	{
		$cfg		= array ('needle' => 'Jackdaws love my big sphinx of quartz.');
		$exception	= NULL;
		try
		{
			$this -> object -> setConfig ($cfg);
		}
		catch (\Exception $e)
		{
			$exception	= $e;
		}
		$this -> assertNull ($exception);
		$this -> assertTrue ($this -> object -> getConfig () == $cfg);
	}
}
