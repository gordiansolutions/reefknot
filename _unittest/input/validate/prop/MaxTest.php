<?php

namespace gordian\reefknot\input\validate\prop;

require_once dirname (__FILE__) . '/../../../../input/validate/prop/Max.php';

/**
 * Test class for Max.
 * Generated by PHPUnit on 2011-12-11 at 10:22:57.
 */
class MaxTest extends \PHPUnit_Framework_TestCase
{

	/**
	 * @var gordian\reefknot\input\validate\prop\Max
	 */
	protected $object;

	/**
	 * Sets up the fixture, for example, opens a network connection.
	 * This method is called before a test is executed.
	 */
	protected function setUp ()
	{
		$this -> object = new Max (array ('limit' => 5));
	}

	/**
	 * Tears down the fixture, for example, closes a network connection.
	 * This method is called after a test is executed.
	 */
	protected function tearDown ()
	{
		
	}
	
	/**
	 * Test that a null value passes validation 
	 */
	public function testIsValidNullPasses ()
	{
		$this -> object -> setData (NULL);
		$this -> assertTrue ($this -> object -> isValid ());
	}
	
	/**
	 * Test that an int that's within the limit passes the validation 
	 */
	public function testIsValidIntPasses ()
	{
		$this -> object -> setData (4);
		$this -> assertTrue ($this -> object -> isValid ());
	}
	
	/**
	 * Test that a float that's within the limit passes validation 
	 */
	public function testIsValidFloatPasses ()
	{
		$this -> object -> setData (pi ());
		$this -> assertTrue ($this -> object -> isValid ());
	}
	
	/**
	 * Test that a string that's within the limit passes validation 
	 */
	public function testIsValidStringPasses ()
	{
		$this -> object -> setData ('Test');
		$this -> assertTrue ($this -> object -> isValid ());
	}
	
	/**
	 * Test that an array that's within the limit passes validation 
	 */
	public function testIsValidArrayPasses ()
	{
		$this -> object -> setData (array (1, 2, 3));
		$this -> assertTrue ($this -> object -> isValid ());
	}
	
	/**
	 * Test that an associative array that's within the limit passes validation 
	 */
	public function testIsValidAssocPasses ()
	{
		$this -> object -> setData (array ('a' => 1, 'b' => 2, 'c' => 3));
		$this -> assertTrue ($this -> object -> isValid ());
	}
	
	/**
	 * Test that a integer that equals the limit passes validation 
	 */
	public function testIsValidIntEdgePasses ()
	{
		$this -> object -> setData (5);
		$this -> assertTrue ($this -> object -> isValid ());
	}
	
	/**
	 * Test that a float that equals the limit passes validation 
	 */
	public function testIsValidFloatEdgePasses ()
	{
		$this -> object -> setData (5.0);
		$this -> assertTrue ($this -> object -> isValid ());
	}
	
	/**
	 * Test that a string that equals the limit passes validation 
	 */
	public function testIsValidStringEdgePasses ()
	{
		$this -> object -> setData ('Fifth');
		$this -> assertTrue ($this -> object -> isValid ());
	}
	
	/**
	 * Test that an array that equals the limit passes validation 
	 */
	public function testIsValidArrayEdgePasses ()
	{
		$this -> object -> setData (array (1, 2, 3, 4, 5));
		$this -> assertTrue ($this -> object -> isValid ());
	}
	
	/**
	 * Test that an associative array that equals the limit passes validation 
	 */
	public function testIsValidAssocEdgePasses ()
	{
		$this -> object -> setData (array ('a' => 1, 'b' => 2, 'c' => 3, 'd' => 4, 'e' => 5));
		$this -> assertTrue ($this -> object -> isValid ());
	}
	
	/**
	 * Test that an integer thats larger than the limit fails validation 
	 */
	public function testIsValidIntOverFails ()
	{
		$this -> object -> setData (6);
		$this -> assertFalse ($this -> object -> isValid ());
	}
	
	/**
	 * Test that a float that's larger than the limit fails validation 
	 */
	public function testIsValidFloatOverFails ()
	{
		$this -> object -> setData (5.0001);
		$this -> assertFalse ($this -> object -> isValid ());
	}
	
	/**
	 * Test that a string that's longer than the limit fails validation 
	 */
	public function testIsValidStringOverFails ()
	{
		$this -> object -> setData ('Failed');
		$this -> assertFalse ($this -> object -> isValid ());
	}
	
	/**
	 * Test that an array that's longer than the limit fails validation 
	 */
	public function testIsValidArrayOverFails ()
	{
		$this -> object -> setData (array (1, 2, 3, 4, 5, 6));
		$this -> assertFalse ($this -> object -> isValid ());
	}
	
	/**
	 * Test that an associative array that's longer than the limit fails validation 
	 */
	public function testIsValidAssocOverFails ()
	{
		$this -> object -> setData (array ('a' => 1, 'b' => 2, 'c' => 3, 'd' => 4, 'e' => 5, 'f' => 6));
		$this -> assertFalse ($this -> object -> isValid ());
	}
	
	/**
	 * Test that trying to give the object data it can't test throws an InvalidArgumentException 
	 */
	public function testIsValidWrongTypeThrowsException ()
	{
		$exception	= NULL;
		$this -> object -> setData (true);
		try 
		{
			$this -> object -> isValid ();
		}
		catch (\Exception $e)
		{
			$exception	= $e;
		}
		$this -> assertTrue ($exception instanceof \InvalidArgumentException);
	}
	
	public function testIsValidIntFromFieldPasses ()
	{
		$field		= $this	-> getMockBuilder ('gordian\reefknot\input\validate\Field')
							-> disableOriginalConstructor ()
							-> getMock ();
		
		$field	-> expects ($this -> any ())
				-> method ('isValid')
				-> will ($this -> returnValue (true));
		
		$field	-> expects ($this -> any ())
				-> method ('getData')
				-> will ($this -> returnValue (10));
		
		$this -> object	-> setConfig (array ('limit' => $field))
						-> setData (9);
		
		$this -> assertTrue ($this -> object -> isValid ());
	}
	
	public function testIsValidIntFromFieldFails ()
	{
		$field		= $this	-> getMockBuilder ('gordian\reefknot\input\validate\Field')
							-> disableOriginalConstructor ()
							-> getMock ();
		
		$field	-> expects ($this -> any ())
				-> method ('isValid')
				-> will ($this -> returnValue (true));
		
		$field	-> expects ($this -> any ())
				-> method ('getData')
				-> will ($this -> returnValue (10));
		
		$this -> object	-> setConfig (array ('limit' => $field))
						-> setData (12);
		
		$this -> assertFalse ($this -> object -> isValid ());
	}
	
	public function testIsValidIntFromInvalidFieldFails ()
	{
		$field		= $this	-> getMockBuilder ('gordian\reefknot\input\validate\Field')
							-> disableOriginalConstructor ()
							-> getMock ();
		
		$field	-> expects ($this -> any ())
				-> method ('isValid')
				-> will ($this -> returnValue (false));
		
		$field	-> expects ($this -> any ())
				-> method ('getData')
				-> will ($this -> returnValue (10));
		
		$this -> object	-> setConfig (array ('limit' => $field))
						-> setData (9);
		
		$this -> assertFalse ($this -> object -> isValid ());
	}
	
	public function testIsValidIntFromNonNumericFieldFails ()
	{
		$field		= $this	-> getMockBuilder ('gordian\reefknot\input\validate\Field')
							-> disableOriginalConstructor ()
							-> getMock ();
		
		$field	-> expects ($this -> any ())
				-> method ('isValid')
				-> will ($this -> returnValue (true));
		
		$field	-> expects ($this -> any ())
				-> method ('getData')
				-> will ($this -> returnValue ('asdf'));
		
		$this -> object	-> setConfig (array ('limit' => $field))
						-> setData (9);
		
		$this -> assertFalse ($this -> object -> isValid ());
	}
}
