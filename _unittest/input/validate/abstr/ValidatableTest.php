<?php

namespace gordian\reefknot\input\validate\abstr;

use gordian\reefknot\input\validate, 
	gordian\reefknot\input\validate\type;

/**
 * Test class for Validatable.
 * Generated by PHPUnit on 2011-12-17 at 18:10:35.
 */
class ValidatableTest extends \PHPUnit_Framework_TestCase
{

	/**
	 * @var Validatable
	 */
	protected $object;

	/**
	 * Sets up the fixture, for example, opens a network connection.
	 * This method is called before a test is executed.
	 */
	protected function setUp ()
	{
		$this -> object = $this -> getMockForAbstractClass ('gordian\reefknot\input\validate\abstr\Validatable');
	}

	/**
	 * Tears down the fixture, for example, closes a network connection.
	 * This method is called after a test is executed.
	 */
	protected function tearDown ()
	{
		
	}

	/**
	 */
	public function testGetSetData ()
	{
		$this -> object -> setData (NULL);
		$this -> assertNull ($this -> object -> getData ());
		$this -> object -> setData (123);
		$this -> assertEquals ($this -> object -> getData (), 123);
		$this -> object -> setData (pi ());
		$this -> assertEquals ($this -> object -> getData (), pi ());
		$this -> object -> setData (array ());
		$this -> assertEquals ($this -> object -> getData (), array ());
		$this -> object -> setData (array (1, 2, 3));
		$this -> assertEquals ($this -> object -> getData (), array (1, 2, 3));
		$this -> object -> setData (array ('foo' => 1, 'bar' => 2, 'baz' => 3));
		$this -> assertEquals ($this -> object -> getData (), array ('foo' => 1, 'bar' => 2, 'baz' => 3));
	}

	/**
	 */
	public function testSetParentPasses ()
	{
		$parent = $this -> getMockBuilder ('gordian\reefknot\input\validate\Field') -> disableOriginalConstructor () -> getMock ();
		$this -> object -> setParent ($parent);
		$this -> assertEquals ($this -> object -> getParent (), $parent);
	}

	public function testSetParentSameParentPasses ()
	{
		$parent = $this -> getMockBuilder ('gordian\reefknot\input\validate\Field') -> disableOriginalConstructor () -> getMock ();
		$this -> object -> setParent ($parent);
		$this -> assertEquals ($this -> object -> getParent (), $parent);
		$this -> object -> setParent ($parent);
		$this -> assertEquals ($this -> object -> getParent (), $parent);
	}
	
	public function testSetParentDifferentParentThrowsException ()
	{
		$exception	= NULL;
		$parent		= $this -> getMockBuilder ('gordian\reefknot\input\validate\Field') -> disableOriginalConstructor () -> getMock ();
		$parent2	= $this -> getMockBuilder ('gordian\reefknot\input\validate\Field') -> disableOriginalConstructor () -> getMock ();
		$this -> object -> setParent ($parent);
		$this -> assertEquals ($this -> object -> getParent (), $parent);
		try
		{
			$this -> object -> setParent ($parent2);
		}
		catch (\Exception $e)
		{
			$exception	= $e;
		}
		$this -> assertInstanceOf ('\InvalidArgumentException', $exception);
		$this -> assertEquals ($this -> object -> getParent (), $parent);
	}
	
	/**
	 */
	public function testGetParent ()
	{
		$this -> assertNull ($this -> object -> getParent ());
		$parent = $this -> getMockBuilder ('gordian\reefknot\input\validate\Field') -> disableOriginalConstructor () -> getMock ();
		$this -> object -> setParent ($parent);
		$this -> assertEquals ($this -> object -> getParent (), $parent);
	}

	/**
	 */
	public function testResetInvalids ()
	{
		$this -> object -> resetInvalids ();
		$this -> assertEquals ($this -> object -> getInvalids (), array ());
	}

	/**
	 */
	public function testGetInvalids ()
	{
		$this -> assertEquals ($this -> object -> getInvalids (), array ());
	}

	/**
	 */
	public function testHasInvalids ()
	{
		$this -> assertFalse ($this -> object -> hasInvalids ());
	}
}
