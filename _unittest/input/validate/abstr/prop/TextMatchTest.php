<?php

namespace gordian\reefknot\input\validate\abstr\prop;

/**
 * Test class for TextMatch.
 * Generated by PHPUnit on 2012-03-27 at 17:43:05.
 */
class TextMatchTest extends \PHPUnit_Framework_TestCase
{

	/**
	 * @var gordian\reefknot\input\validate\abstr\prop\TextMatch
	 */
	protected $object;

	/**
	 * Sets up the fixture, for example, opens a network connection.
	 * This method is called before a test is executed.
	 */
	protected function setUp ()
	{
		$this -> object = $this -> getMockForAbstractClass ('gordian\reefknot\input\validate\abstr\prop\TextMatch', array (array ('needle' => 'asdf')));
	}

	/**
	 * Tears down the fixture, for example, closes a network connection.
	 * This method is called after a test is executed.
	 */
	protected function tearDown ()
	{
		
	}

	public function testSetConfigNoValueThrowsException ()
	{
		$exception = NULL;

		try
		{
			$this -> object -> setConfig (array ());
		}
		catch (\Exception $e)
		{
			$exception = $e;
		}

		$this -> assertInstanceOf ('\InvalidArgumentException', $exception);
		$this -> assertEquals ($this -> object -> getConfig (), array ('needle' => 'asdf'));
	}

	public function testSetConfigEmptyValueThrowsException ()
	{
		$exception = NULL;

		try
		{
			$this -> object -> setConfig (array ('needle' => NULL));
		}
		catch (\Exception $e)
		{
			$exception = $e;
		}

		$this -> assertInstanceOf ('\InvalidArgumentException', $exception);
		$this -> assertEquals ($this -> object -> getConfig (), array ('needle' => 'asdf'));
	}

	public function testSetConfigEmptyValueThrowsException2 ()
	{
		$exception = NULL;

		try
		{
			$this -> object -> setConfig (array ('needle' => ''));
		}
		catch (\Exception $e)
		{
			$exception = $e;
		}

		$this -> assertInstanceOf ('\InvalidArgumentException', $exception);
		$this -> assertEquals ($this -> object -> getConfig (), array ('needle' => 'asdf'));
	}

	public function testSetConfigInvalidValueThrowsException ()
	{
		$exception	= NULL;
		
		try
		{
			$this -> object -> setConfig (array ('needle', new \stdClass()));
		}
		catch (\Exception $e)
		{
			$exception	= $e;
		}
		
		$this -> assertInstanceOf ('\InvalidArgumentException', $exception);
		$this -> assertEquals ($this -> object -> getConfig (), array ('needle' => 'asdf'));
	}
	
	public function testSetConfigPasses ()
	{
		$this -> object -> setConfig (array ('needle' => 'The quick brown fox jumps over the lazy dog'));
		$this -> assertEquals ($this -> object -> getConfig (), array ('needle' => 'The quick brown fox jumps over the lazy dog'));
	}

}
