<?php

namespace gordian\reefknot\input\validate\abstr\prop;

/**
 * Test class for Ranged.
 * Generated by PHPUnit on 2012-01-21 at 13:36:08.
 */
class RangedTest extends \PHPUnit_Framework_TestCase
{

	/**
	 * @var gordian\reefknot\input\validate\abstr\prop\Ranged
	 */
	protected $object;

	/**
	 * Sets up the fixture, for example, opens a network connection.
	 * This method is called before a test is executed.
	 */
	protected function setUp ()
	{
		$this -> object = $this -> getMockForAbstractClass ('gordian\reefknot\input\validate\abstr\prop\Ranged', array (
			'config'	=> array (
				'limit'	=> 5
			)
		));
	}

	/**
	 * Tears down the fixture, for example, closes a network connection.
	 * This method is called after a test is executed.
	 */
	protected function tearDown ()
	{
		
	}

	/**
	 * Test that trying to configure with no data triggers an InvalidArgumentException
	 */
	public function testSetConfigEmptyThrowsException ()
	{
		$exception	= NULL;
		try
		{
			$this -> object -> setConfig (array ());
		}
		catch (\Exception $e)
		{
			$exception	= $e;
		}
		$this -> assertTrue ($exception instanceof \InvalidArgumentException);
		$this -> assertTrue ($this -> object -> getConfig () == array ('limit' => 5));
	}
	
	/**
	 * Test that trying to configure with no limit data triggers an InvalidArgumentException 
	 */
	public function testSetConfigNoLimitThrowsException ()
	{
		$exception	= NULL;
		try
		{
			$this -> object -> setConfig (array ('foo' => 'bar'));
		}
		catch (\Exception $e)
		{
			$exception	= $e;
		}
		$this -> assertTrue ($exception instanceof \InvalidArgumentException);
		$this -> assertTrue ($this -> object -> getConfig () == array ('limit' => 5));
	}
	
	/**
	 * Test that trying to set a limit with invalid data triggers an InvalidArgumentException 
	 */
	public function testSetConfigInvalidLimitThrowsException ()
	{
		$exception	= NULL;
		try
		{
			$this -> object -> setConfig (array ('limit' => 'invalid'));
		}
		catch (\Exception $e)
		{
			$exception	= $e;
		}
		$this -> assertTrue ($exception instanceof \InvalidArgumentException);
		$this -> assertTrue ($this -> object -> getConfig () == array ('limit' => 5));
	}
	
	/**
	 * Test that trying to set a limit below 1 triggers an InvalidArgumentException 
	 */
	public function testSetConfigZeroLimitThrowsException ()
	{
		$exception	= NULL;
		try
		{
			$this -> object -> setConfig (array ('limit' => 0));
		}
		catch (\Exception $e)
		{
			$exception	= $e;
		}
		$this -> assertTrue ($exception instanceof \InvalidArgumentException);
		$this -> assertTrue ($this -> object -> getConfig () == array ('limit' => 5));
	}
	
	/**
	 * Test that valid limits can be passed to the object 
	 */
	public function testSetConfigPasses ()
	{
		$exception	= NULL;
		try
		{
			$this -> object -> setConfig (array ('limit' => 10));
		}
		catch (\Exception $e)
		{
			$exception	= $e;
		}
		$this -> assertNull ($exception);
		$this -> assertTrue ($this -> object -> getConfig () == array ('limit' => 10));
	}
	
	/**
	 * Test that valid limits can be passed to the object 
	 */
	public function testSetConfigPasses2 ()
	{
		$exception	= NULL;
		$field		= $this	-> getMockBuilder ('gordian\reefknot\input\validate\Field')
							-> disableOriginalConstructor ()
							-> getMock ();
		try
		{
			$this -> object -> setConfig (array ('limit' => $field));
		}
		catch (\Exception $e)
		{
			$exception	= $e;
		}
		$this -> assertNull ($exception);
		$this -> assertTrue ($this -> object -> getConfig () == array ('limit' => $field));
	}
}
