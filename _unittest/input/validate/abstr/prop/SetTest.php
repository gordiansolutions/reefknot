<?php

namespace gordian\reefknot\input\validate\abstr\prop;

/**
 * Test class for Set.
 * Generated by PHPUnit on 2012-03-30 at 12:20:59.
 */
class SetTest extends \PHPUnit_Framework_TestCase
{

	/**
	 * @var Set
	 */
	protected $object;

	/**
	 * Sets up the fixture, for example, opens a network connection.
	 * This method is called before a test is executed.
	 */
	protected function setUp ()
	{
		$this -> object = $this -> getMockForAbstractClass ('gordian\reefknot\input\validate\abstr\prop\Set', array (array ('set' => array (1, 2, 4, 8))));
	}

	/**
	 * Tears down the fixture, for example, closes a network connection.
	 * This method is called after a test is executed.
	 */
	protected function tearDown ()
	{
		
	}
	
	public function testSetConfigEmptyThrowsException ()
	{
		$oldCfg		= $this -> object -> getConfig ();
		$exception	= NULL;
		try
		{
			$this -> object -> setConfig (array ());
		}
		catch (\Exception $e)
		{
			$exception	= $e;
		}
		$this -> assertTrue ($exception instanceof \InvalidArgumentException);
		$this -> assertTrue ($this -> object -> getConfig () === $oldCfg);
	}
	
	public function testSetConfigNoSetThrowsException ()
	{
		$oldCfg		= $this -> object -> getConfig ();
		$exception	= NULL;
		try
		{
			$this -> object -> setConfig (array ('foo' => 'bar'));
		}
		catch (\Exception $e)
		{
			$exception	= $e;
		}
		$this -> assertTrue ($exception instanceof \InvalidArgumentException);
		$this -> assertTrue ($this -> object -> getConfig () === $oldCfg);
	}
	
	public function testSetConfigInvalidSetThrowsException ()
	{
		$oldCfg		= $this -> object -> getConfig ();
		$exception	= NULL;
		try
		{
			$this -> object -> setConfig (array ('set' => NULL));
		}
		catch (\Exception $e)
		{
			$exception	= $e;
		}
		$this -> assertTrue ($exception instanceof \InvalidArgumentException);
		$this -> assertTrue ($this -> object -> getConfig () === $oldCfg);
	}
	
	public function testSetConfigInvalidSetThrowsException2 ()
	{
		$oldCfg		= $this -> object -> getConfig ();
		$exception	= NULL;
		try
		{
			$this -> object -> setConfig (array ('set' => 'asdf'));
		}
		catch (\Exception $e)
		{
			$exception	= $e;
		}
		$this -> assertTrue ($exception instanceof \InvalidArgumentException);
		$this -> assertTrue ($this -> object -> getConfig () === $oldCfg);
	}
	
	public function testSetConfigInvalidSetThrowsException3 ()
	{
		$oldCfg		= $this -> object -> getConfig ();
		$exception	= NULL;
		try
		{
			$this -> object -> setConfig (array ('set' => array ()));
		}
		catch (\Exception $e)
		{
			$exception	= $e;
		}
		$this -> assertTrue ($exception instanceof \InvalidArgumentException);
		$this -> assertTrue ($this -> object -> getConfig () === $oldCfg);
	}
	
	public function testSetConfigPasses ()
	{
		$oldCfg		= $this -> object -> getConfig ();
		$exception	= NULL;
		try
		{
			$this -> object -> setConfig (array ('set' => array ('foo', 'bar', 'baz', 'quux')));
		}
		catch (\Exception $e)
		{
			$exception	= $e;
		}
		$this -> assertNull ($exception);
		$this -> assertFalse ($this -> object -> getConfig () === $oldCfg);
	}
}
