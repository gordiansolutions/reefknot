<?php

namespace gordian\reefknot\input\validate\abstr\prop;

/**
 * Test class for Set.
 * Generated by PHPUnit on 2012-03-30 at 12:20:59.
 */
class SetTest extends \PHPUnit_Framework_TestCase
{

	/**
	 * @var Set
	 */
	protected $object;

	/**
	 * Sets up the fixture, for example, opens a network connection.
	 * This method is called before a test is executed.
	 */
	protected function setUp ()
	{
		$this -> object = $this -> getMockForAbstractClass ('gordian\reefknot\input\validate\abstr\prop\Set', array (array ('set' => array (1, 2, 4, 8))));
	}

	/**
	 * Tears down the fixture, for example, closes a network connection.
	 * This method is called after a test is executed.
	 */
	protected function tearDown ()
	{
		
	}
	
	/**
	 * Test empty configurations trigger an execpt
	 * 
	 * @expectedException \InvalidArgumentException
	 */
	public function testSetConfigEmptyThrowsException ()
	{
		$this -> object -> setConfig (array ());
	}
	
	/**
	 * Check that a config without a set in it throws an execpt
	 * 
	 * @expectedException \InvalidArgumentException
	 */
	public function testSetConfigNoSetThrowsException ()
	{
		$this -> object -> setConfig (array ('foo' => 'bar'));
	}
	
	/**
	 * Check that a config with an invalid set in it throws an execpt
	 * 
	 * @expectedException \InvalidArgumentException
	 */
	public function testSetConfigInvalidSetThrowsException ()
	{
		$this -> object -> setConfig (array ('set' => NULL));
	}
	
	/**
	 * Check that a config with an invalid set in it throws an execpt
	 * 
	 * @expectedException \InvalidArgumentException
	 */
	public function testSetConfigInvalidSetThrowsException2 ()
	{
		$this -> object -> setConfig (array ('set' => 'asdf'));
	}
	
	/**
	 * Check that a config with an empty set in it throws an execpt
	 * 
	 * @expectedException \InvalidArgumentException
	 */
	public function testSetConfigEmptySetThrowsException ()
	{
		$this -> object -> setConfig (array ('set' => array ()));
	}
	
	/**
	 * Check that we can configure the object with a non-empty set
	 */
	public function testSetConfigPasses ()
	{
		$this -> object -> setConfig (array ('set' => array ('foo', 'bar', 'baz', 'quux')));
		$this -> assertSame ($this -> object -> getConfig (), array ('set' => array ('foo', 'bar', 'baz', 'quux')));
	}
}
