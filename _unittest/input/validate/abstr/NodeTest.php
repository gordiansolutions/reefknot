<?php

namespace gordian\reefknot\input\validate\abstr;

/**
 * Test class for Node.
 * Generated by PHPUnit on 2011-12-17 at 18:10:34.
 */
class NodeTest extends \PHPUnit_Framework_TestCase
{

	/**
	 * @var gordian\reefknot\input\validate\abstr\Node
	 */
	protected $object;

	/**
	 * Sets up the fixture, for example, opens a network connection.
	 * This method is called before a test is executed.
	 */
	protected function setUp ()
	{
		$typeMock	= $this -> getMock ('\gordian\reefknot\input\validate\iface\Type');
		$this -> object = $this -> getMockForAbstractClass ('\gordian\reefknot\input\validate\abstr\Node', array ($typeMock));
	}

	/**
	 * Tears down the fixture, for example, closes a network connection.
	 * This method is called after a test is executed.
	 */
	protected function tearDown ()
	{
		
	}

	/**
	 * Test that we can add properties
	 */
	public function testAddProp ()
	{
		$prop	= $this -> getMock ('\gordian\reefknot\input\validate\iface\Prop');
		$this -> assertNotContains ($prop, $this -> object -> getProps ());
		$this -> object -> addProp ($prop);
		$this -> assertContains ($prop, $this -> object -> getProps ());
	}
	
	/**
	 * Test that we can't add the same property twice
	 * 
	 * @expectedException \InvalidArgumentException
	 */
	public function testAddSamePropThrowsException ()
	{
		$prop	= $this -> getMock ('\gordian\reefknot\input\validate\iface\Prop');
		$this -> object -> addProp ($prop);
		$this -> object -> addProp ($prop);
	}
	
	/**
	 * Test that we can remove a property
	 */
	public function testDeleteProp ()
	{
		$prop	= $this -> getMock ('\gordian\reefknot\input\validate\iface\Prop');
		$this -> object -> addProp ($prop);
		$this -> assertContains ($prop, $this -> object -> getProps ());
		$this -> object -> deleteProp (get_class ($prop));
		$this -> assertNotContains ($prop, $this -> object -> getProps ());
	}

	/**
	 * Test that we can get a list of properties
	 */
	public function testGetProps ()
	{
		$prop1	= $this -> getMock ('\gordian\reefknot\input\validate\iface\Prop', array (), array (), 'NodeTestProp1');
		$prop2	= $this -> getMock ('\gordian\reefknot\input\validate\iface\Prop', array (), array (), 'NodeTestProp2');
		$prop3	= $this -> getMock ('\gordian\reefknot\input\validate\iface\Prop', array (), array (), 'NodeTestProp3');
		
		$props	= array (
			get_class ($prop1)	=> $prop1,
			get_class ($prop2)	=> $prop2,
			get_class ($prop3)	=> $prop3
		);
		
		$this -> object -> addProp ($prop1) 
						-> addProp ($prop2) 
						-> addProp ($prop3);
		
		$this -> assertSame ($this -> object -> getProps (), $props);
	}

	/**
	 * Test that we can set the node's type
	 */
	public function testSetType ()
	{
		$mock	= $this -> getMock ('\gordian\reefknot\input\validate\iface\Type');
		$this -> object -> setType ($mock);
		$this -> assertSame ($mock, $this -> object -> getType ());
	}

	/**
	 * Test that we can get the node's type
	 */
	public function testGetType ()
	{
		$mock	= $this -> getMock ('\gordian\reefknot\input\validate\iface\Type');
		$this -> object -> setType ($mock);
		$this -> assertSame ($mock, $this -> object -> getType ());
	}
	
	/**
	 * Test that we can get the node's rules
	 */
	public function testGetRules ()
	{
		$type	= $this -> getMock ('\gordian\reefknot\input\validate\iface\Type');
		$prop1	= $this -> getMock ('\gordian\reefknot\input\validate\iface\Prop', array (), array (), 'NodeTestProp4');
		$prop2	= $this -> getMock ('\gordian\reefknot\input\validate\iface\Prop', array (), array (), 'NodeTestProp5');
		$prop3	= $this -> getMock ('\gordian\reefknot\input\validate\iface\Prop', array (), array (), 'NodeTestProp6');
		
		$rules	= array (
			get_class ($type)	=> $type,
			get_class ($prop1)	=> $prop1,
			get_class ($prop2)	=> $prop2,
			get_class ($prop3)	=> $prop3
		);
		
		$this -> object	-> setType ($type) 
						-> addProp ($prop1) 
						-> addProp ($prop2) 
						-> addProp ($prop3);
		
		$this -> assertSame ($this -> object -> getRules (), $rules);
		
	}
}
