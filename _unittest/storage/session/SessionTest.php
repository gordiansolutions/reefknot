<?php

namespace gordian\reefknot\storage\session;

/**
 * @todo Figure out how to do this with the mocking API 
 */
class BindingMock implements iface\Binding
{
	protected $storage = array ();
	
	public function &getNamespace ($namespace)
	{
		return $this -> storage [$namespace];
	}
}

/**
 * Test class for Session.
 * Generated by PHPUnit on 2012-03-07 at 23:06:12.
 */
class SessionTest extends \PHPUnit_Framework_TestCase
{
	/**
	 * @var gordian\reefknot\storage\session\Session
	 */
	protected $object;
	
	/**
	 * @var gordian\reefknot\storage\session\Binding
	 */
	protected $binding;
	
	/**
	 * Sets up the fixture, for example, opens a network connection.
	 * This method is called before a test is executed.
	 */
	protected function setUp ()
	{
		$this -> binding	= new BindingMock;
		$this -> object	= $this -> getMock ('\gordian\reefknot\storage\session\Session',
											array ('sessionId', 'headersSent', 'startSession'),
											array ($this -> binding, 'unittest'));
		
		$this -> object -> expects ($this -> any ())
						-> method ('sessionId')
						-> will ($this -> returnValue ('abc123'));
		
		$this -> object -> expects ($this -> any ())
						-> method ('headersSent')
						-> will ($this -> returnValue (false));
		
		$this -> object -> expects ($this -> any ())
						-> method ('startSession')
						-> will ($this -> returnValue (true));
	}

	/**
	 * Tears down the fixture, for example, closes a network connection.
	 * This method is called after a test is executed.
	 */
	protected function tearDown ()
	{
		
	}
	
	/**
	 * Test that we can add an item to the session 
	 */
	public function testCreateItem ()
	{
		$storage	=& $this -> binding -> getNamespace ('unittest');
		$this -> assertEmpty ($storage);
		$this -> object ->  createItem ('This is a test', 'test');
		$this -> assertNotEmpty ($storage);
		$this -> assertEquals ('This is a test', $storage ['test']);
	}
	
	/**
	 * Test that we can retrieve a stored item by key 
	 */
	public function testReadItem ()
	{
		$this -> assertNull ($this -> object ->  readItem ('test'));
		$this -> object ->  createItem ('This is a test', 'test');
		$this -> assertEquals ($this -> object ->  readItem ('test'), 'This is a test');
	}

	/**
	 * Test that we can remove a stored item by key 
	 */
	public function testDeleteItem ()
	{
		$storage	=& $this -> binding -> getNamespace ('unittest');
		$this -> assertEmpty ($storage);
		$this -> object ->  createItem ('This is a test', 'test');
		$this -> assertNotEmpty ($storage);
		$this -> assertEquals ('This is a test', $storage ['test']);
		$this -> object ->  deleteItem ('test');
		$this -> assertEmpty ($storage);
	}

	/**
	 * Test that we can modify a stored item by key 
	 */
	public function testUpdateItem ()
	{
		$storage	=& $this -> binding -> getNamespace ('unittest');
		$this -> assertEmpty ($storage);
		$this -> object ->  createItem ('This is a test', 'test');
		$this -> assertEquals ('This is a test', $storage ['test']);
		$this -> object ->  updateItem ('foofoofoo', 'test');
		$this -> assertEquals ('foofoofoo', $storage ['test']);
	}
	
	/**
	 * Test that trying to update an item with a non-scalar key throws an execpt
	 * 
	 * @expectedException \InvalidArgumentException
	 */
	public function testUpdateItemInvalidKeyThrowsException ()
	{
		$this -> object -> updateItem ('asdfdsa', array (1, 2, 3));
	}
	
	/**
	 * Test that we can reset the session 
	 */
	public function testReset ()
	{
		$storage	=& $this -> binding -> getNamespace ('unittest');
		$this -> assertEmpty ($storage);
		$this -> object ->  createItem ('This is a test', 'test')
						->  createItem ('This is another test', 'test2')
						->  createItem ('This is yet another test', 'test3');
		$this -> assertEquals (array (
			'test' => 'This is a test', 
			'test2' => 'This is another test', 
			'test3' => 'This is yet another test'), 
			$storage);
		$this -> object -> reset ();
		$this -> assertEmpty ($storage);
	}

	/**
	 * Test that we can determine if the session contains data 
	 */
	public function testHasData ()
	{
		$storage	=& $this -> binding -> getNamespace ('unittest');
		$this -> assertEmpty ($storage);
		$this -> assertFalse ($this -> object -> hasData ());
		$this -> object ->  createItem ('This is a test', 'test');
		$this -> assertNotEmpty ($storage);
		$this -> assertTrue ($this -> object -> hasData ());
	}
	
	/**
	 * Test that we can get an accurate count of items stored in the session 
	 */
	public function testCount ()
	{
		$this -> assertEquals (count ($this -> object), 0);
		$this -> assertEquals ($this -> object -> count (), 0);
		
		$this -> object	-> createItem (123, 1)
						-> createItem ('abc', 2)
						-> createItem (pi (), 3)
						-> createItem (array (1, 2, 3), 4)
						-> createItem (true, 5);
		
		$this -> assertEquals (count ($this -> object), 5);
		$this -> assertEquals ($this -> object -> count (), 5);
	}
	
	/**
	 * Test that we can iterate over the session through its Iterator interface 
	 */
	public function testIterate ()
	{
		$this -> object	-> createItem (1, 1)
						-> createItem (2, 2)
						-> createItem (3, 3)
						-> createItem (4, 4)
						-> createItem (5, 5);
		
		$count = 1;
		foreach ($this -> object as $key => $val)
		{
			$this -> assertEquals ($key, $count);
			$this -> assertEquals ($val, $count);
			$count++;
		}
	}
	
	/**
	 * Test that attempting to start a session with an empty namespace throws an execpt.
	 * 
	 * @expectedException \InvalidArgumentException
	 */
	public function testConstructInvalidNamespaceThrowsException ()
	{
		$this -> object	= new Session ($this -> getMock ('\gordian\reefknot\storage\session\iface\Binding'), '');
	}
	
	/**
	 * Test that attempting to start the session with a non-scalar namespace throws an execpt
	 * 
	 * @expectedException \InvalidArgumentException
	 */
	public function testConstructInvalidNamespaceThrowsException2 ()
	{
		$this -> object	= new Session ($this -> getMock ('\gordian\reefknot\storage\session\iface\Binding'), array (1, 2, 3));
	}
	
	/**
	 * Test that trying to add an item with a non-scalar key throws an execpt
	 * 
	 * @expectedException \InvalidArgumentException
	 */
	public function testCreateItemInvalidKeyThrowsException ()
	{
		$this -> object -> createItem ('asdfdsa', array (1, 2, 3));
	}
	
	/**
	 * Test that trying to add an item with no key throws an execpt
	 * 
	 * @expectedException \InvalidArgumentException
	 */
	public function testCreateItemInvalidKeyThrowsException2 ()
	{
		$this -> object -> createItem ('asdfdsa', NULL);
	}
	
	/**
	 * Test that attempting to start the session when headers have already been
	 * sent throws an execpt
	 * 
	 * @expectedException \RuntimeException
	 */
	public function testContructNoSessionHeadersAlreadySentThrowsException ()
	{
		$this -> object = $this -> getMockBuilder ('\gordian\reefknot\storage\session\Session')
								-> disableOriginalConstructor ()
								-> setMethods (array ('sessionId', 'headersSent', 'startSession'))
								-> getMock ();
		
		$this -> object -> expects ($this -> any ())
						-> method ('sessionId')
						-> will ($this -> returnValue (''));
		
		$this -> object -> expects ($this -> any ())
						-> method ('headersSent')
						-> will ($this -> returnValue (true));
		
		$this -> object -> expects ($this -> any ())
						-> method ('startSession')
						-> will ($this -> returnValue (false));
		
		$this -> object	-> __construct (new BindingMock, 'unittest');	
	}
	
	/**
	 * Test that a failure to start the session throws an execpt
	 * 
	 * @expectedException \RuntimeException
	 */
	public function testContructCantStartSessionThrowsException ()
	{
		$this -> object = $this -> getMockBuilder ('\gordian\reefknot\storage\session\Session')
								-> disableOriginalConstructor ()
								-> setMethods (array ('sessionId', 'headersSent', 'startSession'))
								-> getMock ();
		
		$this -> object -> expects ($this -> any ())
						-> method ('sessionId')
						-> will ($this -> returnValue (''));
		
		$this -> object -> expects ($this -> any ())
						-> method ('headersSent')
						-> will ($this -> returnValue (false));
		
		$this -> object -> expects ($this -> any ())
						-> method ('startSession')
						-> will ($this -> returnValue (false));
		
		$this -> object	-> __construct (new BindingMock, 'unittest');	
	}
}
