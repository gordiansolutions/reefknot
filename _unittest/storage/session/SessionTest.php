<?php

namespace gordian\reefknot\storage\session;

// This must be in place, as the session class is unable to start the session once output has been sent
session_start ();

/**
 * Test class for Session.
 * Generated by PHPUnit on 2012-03-07 at 23:06:12.
 */
class SessionTest extends \PHPUnit_Framework_TestCase
{

	/**
	 * @var gordian\reefknot\storage\session\Session
	 */
	protected $object;

	/**
	 * Sets up the fixture, for example, opens a network connection.
	 * This method is called before a test is executed.
	 */
	protected function setUp ()
	{
		$this -> object = new Session ('unittest');
	}

	/**
	 * Tears down the fixture, for example, closes a network connection.
	 * This method is called after a test is executed.
	 */
	protected function tearDown ()
	{
		
	}

	/**
	 * @todo Implement testCreateItem().
	 */
	public function testCreateItem ()
	{
		$this -> assertTrue (isset ($_SESSION));
		$this -> assertTrue (empty ($_SESSION ['unittest']));
		$this -> object ->  createItem ('This is a test', 'test');
		$this -> assertFalse (empty ($_SESSION ['unittest']));
		$this -> assertFalse (empty ($_SESSION ['unittest']['test']));
	}

	/**
	 * @todo Implement testReadItem().
	 */
	public function testReadItem ()
	{
		$this -> assertNull ($this -> object ->  readItem ('test'));
		$this -> object ->  createItem ('This is a test', 'test');
		$this -> assertEquals ($this -> object ->  readItem ('test'), 'This is a test');
	}

	/**
	 * @todo Implement testDeleteItem().
	 */
	public function testDeleteItem ()
	{
		$this -> assertTrue (isset ($_SESSION));
		$this -> assertTrue (empty ($_SESSION ['unittest']));
		$this -> object ->  createItem ('This is a test', 'test');
		$this -> assertFalse (empty ($_SESSION ['unittest']));
		$this -> assertFalse (empty ($_SESSION ['unittest']['test']));
		$this -> object ->  deleteItem ('test');
		$this -> assertTrue (empty ($_SESSION ['unittest']));
	}

	/**
	 * @todo Implement testUpdateItem().
	 */
	public function testUpdateItem ()
	{
		$this -> assertTrue (empty ($_SESSION ['unittest']));
		$this -> assertTrue (empty ($_SESSION ['unittest']['test']));
		$this -> object ->  createItem ('This is a test', 'test');
		$this -> object ->  updateItem ('foofoofoo', 'test');
		$this -> assertFalse (empty ($_SESSION ['unittest']['test']));
		$this -> assertEquals ($this -> object ->  readItem ('test'), 'foofoofoo');
	}

	/**
	 * @todo Implement testReset().
	 */
	public function testReset ()
	{
		$this -> assertTrue (empty ($_SESSION ['unittest']));
		$this -> object ->  createItem ('This is a test', 'test')
						->  createItem ('This is another test', 'test2')
						->  createItem ('This is yet another test', 'test3');
		$this -> assertEquals ($_SESSION ['unittest'], array (
			'test' => 'This is a test', 
			'test2' => 'This is another test', 
			'test3' => 'This is yet another test'));
		$this -> object -> reset ();
		$this -> assertTrue (empty ($_SESSION ['unittest']));
	}

	/**
	 * @todo Implement testHasData().
	 */
	public function testHasData ()
	{
		$this -> assertTrue (empty ($_SESSION ['unittest']));
		$this -> assertFalse ($this -> object -> hasData ());
		$this -> object ->  createItem ('This is a test', 'test');
		$this -> assertFalse (empty ($_SESSION ['unittest']));
		$this -> assertTrue ($this -> object -> hasData ());
	}
}
