<?php

namespace gordian\reefknot\markup\widget\abstr;

class WidgetMock extends Widget
{
	const
		TYPE	= 'hr';

}

/**
 * Test class for Widget.
 * Generated by PHPUnit on 2012-06-04 at 09:37:30.
 */
class WidgetTest extends \PHPUnit_Framework_TestCase
{

	/**
	 * @var Widget
	 */
	protected $object;

	protected function setUp ()
	{
		$this -> object = new WidgetMock (new \DOMDocument ());
	}

	protected function tearDown ()
	{
		
	}
	
	/**
	 * Test that the getNode method returns a DOMElement and that it returns the 
	 * same one every time 
	 */
	public function testGetNode ()
	{
		$a	= $this -> object -> getNode ();
		$b	= $this -> object -> getNode ();
		$this -> assertInstanceOf ('\DOMElement', $a);
		$this -> assertTrue ($a === $b);
	}

	/**
	 * Test that we can set a single access key 
	 */
	public function testAccessKeysWithStrings1 ()
	{
		$this -> object -> setAccessKeys ('a');
		$this -> assertEquals ('a', $this -> object -> getAccessKeys ());
		$this -> assertTag (array ('attributes'	=> array ('accesskey' => 'a')), (string) $this -> object);
	}
	
	/**
	 * Test that setting a new access key overwrites the original one 
	 */
	public function testAccessKeysWithStrings2 ()
	{
		$this -> object -> setAccessKeys ('a');
		$this -> object -> setAccessKeys ('z');
		$this -> assertEquals ('z', $this -> object -> getAccessKeys ());
		$this -> assertTag (array ('attributes'	=> array ('accesskey' => 'z')), (string) $this -> object);
		
	}
	
	/**
	 * Test that we can set multiple access keys 
	 */
	public function testAccessKeysWithStrings3 ()
	{
		$this -> object -> setAccessKeys ('a');
		$this -> object -> setAccessKeys ('q w e r t y');
		$this -> assertEquals ('q w e r t y', $this -> object -> getAccessKeys ());
		$this -> assertTag (array ('attributes'	=> array ('accesskey' => 'q w e r t y')), (string) $this -> object);
	}
	
	/**
	 * Test that we can set a single access key 
	 */
	public function testAccessKeysWithArrays1 ()
	{
		$this -> object -> setAccessKeys (array ('a'));
		$this -> assertEquals ('a', $this -> object -> getAccessKeys ());
		$this -> assertTag (array ('attributes'	=> array ('accesskey' => 'a')), (string) $this -> object);
	}
	
	/**
	 * Test that setting a new access key overwrites the original one 
	 */
	public function testAccessKeysWithArrays2 ()
	{
		$this -> object -> setAccessKeys (array ('a'));
		$this -> object -> setAccessKeys (array ('z'));
		$this -> assertEquals ('z', $this -> object -> getAccessKeys ());
		$this -> assertTag (array ('attributes'	=> array ('accesskey' => 'z')), (string) $this -> object);
	}
	
	/**
	 * Test that we can set multiple access keys 
	 */
	public function testAccessKeysWithArrays3 ()
	{
		$this -> object -> setAccessKeys (array ('a'));
		$this -> object -> setAccessKeys (array ('q', 'w', 'e', 'r', 't', 'y'));
		$this -> assertEquals ('q w e r t y', $this -> object -> getAccessKeys ());
		$this -> assertTag (array ('attributes'	=> array ('accesskey' => 'q w e r t y')), (string) $this -> object);		
	}
	
	/**
	 * Test that we can add a new access key to the existing list 
	 */
	public function testAddAccessKey ()
	{
		$this -> assertFalse ($this -> object -> hasAccessKey ('a'));
		$this -> assertFalse ($this -> object -> hasAccessKey ('z'));
		$this -> object -> addAccessKey ('a');
		$this -> assertTrue ($this -> object -> hasAccessKey ('a'));
		$this -> assertFalse ($this -> object -> hasAccessKey ('z'));
		$this -> object -> addAccessKey ('z');
		$this -> assertTrue ($this -> object -> hasAccessKey ('a'));
		$this -> assertTrue ($this -> object -> hasAccessKey ('z'));
		$this -> assertEquals ('a z', $this -> object -> getAccessKeys ());
		$this -> assertTag (array ('attributes'	=> array ('accesskey' => 'a z')), (string) $this -> object);
	}
	
	/**
	 * Test that we can remove individual access keys from the list 
	 */
	public function testRemoveAccessKey ()
	{
		$this -> object -> setAccessKeys ('a z');
		$this -> assertTrue ($this -> object -> hasAccessKey ('a'));
		$this -> assertTrue ($this -> object -> hasAccessKey ('z'));
		$this -> object -> removeAccessKey ('z');
		$this -> assertTrue ($this -> object -> hasAccessKey ('a'));
		$this -> assertFalse ($this -> object -> hasAccessKey ('z'));
		$this -> object -> removeAccessKey ('a');
		$this -> assertFalse ($this -> object -> hasAccessKey ('a'));
		$this -> assertFalse ($this -> object -> hasAccessKey ('z'));
		$this -> assertEmpty ($this -> object -> getAccessKeys ());
		$this -> assertNotTag (array ('attributes' => array ('accesskey')), (string) $this -> object);
	}
	
	/**
	 * Test that we can set a single class
	 */
	public function testClassesWithStrings1 ()
	{
		$this -> object -> setClasses ('foo');
		$this -> assertEquals ('foo', $this -> object -> getClasses ());
		$this -> assertTag (array ('attributes'	=> array ('class' => 'foo')), (string) $this -> object);
	}
	
	/**
	 * Test that setting a new class overwrites the original one 
	 */
	public function testClassesWithStrings2 ()
	{
		$this -> object -> setClasses ('foo');
		$this -> object -> setClasses ('bar');
		$this -> assertEquals ('bar', $this -> object -> getClasses ());
		$this -> assertTag (array ('attributes'	=> array ('class' => 'bar')), (string) $this -> object);
	}
	
	/**
	 * Test that we can set multiple classes
	 */
	public function testClassesWithStrings3 ()
	{
		$this -> object -> setClasses ('fred');
		$this -> object -> setClasses ('foo bar baz quux farble xyzzy');
		$this -> assertEquals ('foo bar baz quux farble xyzzy', $this -> object -> getClasses ());
		$this -> assertTag (array ('attributes'	=> array ('class' => 'foo bar baz quux farble xyzzy')), (string) $this -> object);
	}
	
	/**
	 * Test that we can set a single class
	 */
	public function testClassesWithArrays1 ()
	{
		$this -> object -> setClasses (array ('foo'));
		$this -> assertEquals ('foo', $this -> object -> getClasses ());
		$this -> assertTag (array ('attributes'	=> array ('class' => 'foo')), (string) $this -> object);
	}
	
	/**
	 * Test that setting a new class overwrites the original one 
	 */
	public function testClassesWithArrays2 ()
	{
		$this -> object -> setClasses (array ('foo'));
		$this -> object -> setClasses (array ('bar'));
		$this -> assertEquals ('bar', $this -> object -> getClasses ());
		$this -> assertTag (array ('attributes'	=> array ('class' => 'bar')), (string) $this -> object);
	}
	
	/**
	 * Test that we can set multiple classes
	 */
	public function testClassesWithArrays3 ()
	{
		$this -> object -> setClasses (array ('fred'));
		$this -> object -> setClasses (array ('foo', 'bar', 'baz', 'quux', 'farble', 'xyzzy'));
		$this -> assertEquals ('foo bar baz quux farble xyzzy', $this -> object -> getClasses ());
		$this -> assertTag (array ('attributes'	=> array ('class' => 'foo bar baz quux farble xyzzy')), (string) $this -> object);
	}
	
	/**
	 * Test that we can add a new class to the existing class list 
	 */
	public function testAddClass ()
	{
		$this -> assertFalse ($this -> object -> hasClass ('foo'));
		$this -> assertFalse ($this -> object -> hasClass ('bar'));
		$this -> object -> addClass ('foo');
		$this -> assertTrue ($this -> object -> hasClass ('foo'));
		$this -> assertFalse ($this -> object -> hasClass ('bar'));
		$this -> object -> addClass ('bar');
		$this -> assertTrue ($this -> object -> hasClass ('foo'));
		$this -> assertTrue ($this -> object -> hasClass ('bar'));
		$this -> assertEquals ('foo bar', $this -> object -> getClasses ());
		$this -> assertTag (array ('attributes'	=> array ('class' => 'foo bar')), (string) $this -> object);
	}
	
	/**
	 * Test that we can remove an individual class from the list 
	 */
	public function testRemoveClass ()
	{
		$this -> object -> setClasses ('foo bar');
		$this -> assertTrue ($this -> object -> hasClass ('foo'));
		$this -> assertTrue ($this -> object -> hasClass ('bar'));
		$this -> object -> removeClass ('bar');
		$this -> assertTrue ($this -> object -> hasClass ('foo'));
		$this -> assertFalse ($this -> object -> hasClass ('bar'));
		$this -> object -> removeClass ('foo');
		$this -> assertFalse ($this -> object -> hasClass ('foo'));
		$this -> assertFalse ($this -> object -> hasClass ('bar'));
		$this -> assertEquals ('', $this -> object -> getClasses ());
		$this -> assertNotTag (array ('attributes' => array ('class')), (string) $this -> object);
	}
	
	/**
	 * Test that contenteditable defaults to unset 
	 */
	public function testContentEditable1 ()
	{
		$this -> assertEmpty ($this -> object -> getContentEditable ());
		$this -> assertNotTag (array ('attributes' => array ('contenteditable')), (string) $this -> object);
	}
	
	/**
	 * Test that we can set contenteditable to true 
	 */
	public function testContentEditable2 ()
	{
		$this -> object -> setContentEditable ('true');
		$this -> assertEquals ($this -> object -> getContentEditable (), 'true');
		$this -> assertTag (array ('attributes' => array ('contenteditable' => 'true')), (string) $this -> object);
	}
	
	/**
	 * Test that we can set contenteditable to inherit 
	 */
	public function testContentEditable3 ()
	{
		$this -> object -> setContentEditable ('inherit');
		$this -> assertEquals ($this -> object -> getContentEditable (), 'inherit');
		$this -> assertTag (array ('attributes' => array ('contenteditable' => 'inherit')), (string) $this -> object);
	}
	
	/**
	 * Test that we can set contenteditable to false 
	 */
	public function testContentEditable4 ()
	{
		$this -> object -> setContentEditable ('false');
		$this -> assertEquals ($this -> object -> getContentEditable (), 'false');
		$this -> assertTag (array ('attributes' => array ('contenteditable' => 'false')), (string) $this -> object);
	}
	
	/**
	 * Test that we can set contenteditable to true with a boolean 
	 */
	public function testContentEditable5 ()
	{
		$this -> object -> setContentEditable (true);
		$this -> assertEquals ($this -> object -> getContentEditable (), 'true');
		$this -> assertTag (array ('attributes' => array ('contenteditable' => 'true')), (string) $this -> object);
	}
	
	/**
	 * Test that we can set contenteditable to false with a boolean 
	 */
	public function testContentEditable6 ()
	{
		$this -> object -> setContentEditable (false);
		$this -> assertEquals ($this -> object -> getContentEditable (), 'false');
		$this -> assertTag (array ('attributes' => array ('contenteditable' => 'false')), (string) $this -> object);
	}
	
	/**
	 * Test that we can unset contenteditable 
	 */
	public function testContentEditable7 ()
	{
		$this -> object -> setContentEditable ('true');
		$this -> object -> setContentEditable (NULL);
		$this -> assertEmpty ($this -> object -> getContentEditable ());
		$this -> assertNotTag (array ('attributes' => array ('contenteditable')), (string) $this -> object);										
		
	}
	
	/**
	 * Test that we can set contentmenu 
	 */
	public function testContextMenu ()
	{
		$this -> object -> setContextMenu ('asdf');
		$this -> assertEquals ('asdf', $this -> object -> getContextMenu ());
		$this -> assertTag (array ('attributes' => array ('contextmenu' => 'asdf')), (string) $this -> object);
	}
	
	/**
	 * Test that we can set dir to ltr 
	 */
	public function testDir1 ()
	{
		$this -> object -> setDir ('ltr');
		$this -> assertEquals ('ltr', $this -> object -> getDir ());
		$this -> assertTag (array ('attributes' => array ('dir' => 'ltr')), (string) $this -> object);
	}
	
	/**
	 * Test that we can set dir to rtl 
	 */
	public function testDir2 ()
	{
		$this -> object -> setDir ('rtl');
		$this -> assertEquals ('rtl', $this -> object -> getDir ());
		$this -> assertTag (array ('attributes' => array ('dir' => 'rtl')), (string) $this -> object);
	}
	
	/**
	 * Test that we can set dir to auto 
	 */
	public function testDir3 ()
	{
		$this -> object -> setDir ('auto');
		$this -> assertEquals ('auto', $this -> object -> getDir ());
		$this -> assertTag (array ('attributes' => array ('dir' => 'auto')), (string) $this -> object);
	}
	
	/**
	 * Test that we can unset dir 
	 */
	public function testDir4 ()
	{
		$this -> object -> setDir ('ltr');
		$this -> object -> setDir (NULL);
		$this -> assertEmpty ($this -> object -> getDir ());
		$this -> assertNotTag (array ('attributes' => array ('dir')), (string) $this -> object);
	}
	
	/**
	 * Test that we can set draggable to true 
	 */
	public function testDraggable1 ()
	{
		$this -> object -> setDraggable ('true');
		$this -> assertEquals ('true', $this -> object -> getDraggable ());
		$this -> assertTag (array ('attributes' => array ('draggable' => 'true')), (string) $this -> object);
	}

	/**
	 * Test that we can set draggable to true with boolean 
	 */
	public function testDraggable2 ()
	{
		$this -> object -> setDraggable (true);
		$this -> assertEquals ('true', $this -> object -> getDraggable ());
		$this -> assertTag (array ('attributes' => array ('draggable' => 'true')), (string) $this -> object);
	}
	
	/**
	 * Test that we can set draggable to false 
	 */
	public function testDraggable3 ()
	{
		$this -> object -> setDraggable ('false');
		$this -> assertEquals ('false', $this -> object -> getDraggable ());
		$this -> assertTag (array ('attributes' => array ('draggable' => 'false')), (string) $this -> object);
	}

	/**
	 * Test that we can set draggable to false with boolean 
	 */
	public function testDraggable4 ()
	{
		$this -> object -> setDraggable (false);
		$this -> assertEquals ('false', $this -> object -> getDraggable ());
		$this -> assertTag (array ('attributes' => array ('draggable' => 'false')), (string) $this -> object);
	}
	
	/**
	 * Test that we can set draggable to auto 
	 */
	public function testDraggable5 ()
	{
		$this -> object -> setDraggable ('auto');
		$this -> assertEquals ('auto', $this -> object -> getDraggable ());
		$this -> assertTag (array ('attributes' => array ('draggable' => 'auto')), (string) $this -> object);
	}
	
	/**
	 * Test that we can unset draggable 
	 */
	public function testDraggable6 ()
	{
		$this -> object -> setDraggable ('auto');
		$this -> object -> setDraggable (NULL);
		$this -> assertEmpty ($this -> object -> getDraggable ());
		$this -> assertNotTag (array ('attributes' => array ('draggable')), (string) $this -> object);
	}
	
	public function testDropZone1 ()
	{
		$this -> object -> setDropZone ('move');
		$this -> assertEquals ('move', $this -> object -> getDropZone ());
		$this -> assertTag (array ('attributes' => array ('dropzone' => 'move')), (string) $this -> object);
	}

	public function testDropZone2 ()
	{
		$this -> object -> setDropZone ('copy');
		$this -> assertEquals ('copy', $this -> object -> getDropZone ());
		$this -> assertTag (array ('attributes' => array ('dropzone' => 'copy')), (string) $this -> object);
	}
	
	public function testDropZone3 ()
	{
		$this -> object -> setDropZone ('link');
		$this -> assertEquals ('link', $this -> object -> getDropZone ());
		$this -> assertTag (array ('attributes' => array ('dropzone' => 'link')), (string) $this -> object);
	}
	
	public function testDropZone4 ()
	{
		$this -> object -> setDropZone ('move');
		$this -> object -> setDropZone (NULL);
		$this -> assertEmpty ($this -> object -> getDropZone ());
		$this -> assertNotTag (array ('attributes' => array ('dropzone')), (string) $this -> object);
	}
	
	public function testSetHidden ()
	{
		$this -> object -> setHidden ();
		$this -> assertTrue ($this -> object -> isHidden ());
		$this -> assertTag (array ('attributes' => array ('hidden' => 'hidden')), (string) $this -> object);
	}
	
	public function testUnsetHidden ()
	{
		$this -> object -> setHidden ();
		$this -> object -> unsetHidden ();
		$this -> assertFalse ($this -> object -> isHidden ());
		$this -> assertNotTag (array ('attributes' => array ('hidden')), (string) $this -> object);
		
	}
	
	public function testId1 ()
	{
		$this -> object -> setId ('foo_bar_baz');
		$this -> assertEquals ($this -> object -> getId (), 'foo_bar_baz');
		$this -> assertTag (array ('attributes' => array ('id' => 'foo_bar_baz')), (string) $this -> object);
	}
	
	public function testId2 ()
	{
		$this -> object -> setId ('foo_bar_baz');
		$this -> object -> setId (NULL);
		$this -> assertEmpty ($this -> object -> getId ());
		$this -> assertNotTag (array ('attributes' => array ('id')), (string) $this -> object);
	}
	
	public function testLang1 ()
	{
		$this -> object -> setLang ('en-gb');
		$this -> assertEquals ('en-gb', $this -> object -> getLang ());
		$this -> assertTag (array ('attributes' => array ('lang' => 'en-gb')), (string) $this -> object);
	}
	
	public function testLang2 ()
	{
		$this -> object -> setLang ('en-gb');
		$this -> object -> setLang (NULL);
		$this -> assertEmpty ($this -> object -> getLang ());
		$this -> assertNotTag (array ('attributes' => array ('lang')), (string) $this -> object);
		
	}

	public function testSpellCheck1 ()
	{
		$this -> object -> setSpellCheck ();
		$this -> assertTrue ($this -> object -> isSpellChecked ());
		$this -> assertTag (array ('attributes' => array ('spellcheck' => 'true')), (string) $this -> object);
	}
	
	public function testSpellCheck2 ()
	{
		$this -> object -> setSpellCheck ();
		$this -> object -> unsetSpellCheck ();
		$this -> assertFalse ($this -> object -> isSpellChecked ());
		$this -> assertTag (array ('attributes' => array ('spellcheck' => 'false')), (string) $this -> object);
	}
	
	public function testSpellCheck3 ()
	{
		$this -> object -> setSpellCheck ();
		$this -> object -> resetSpellCheck ();
		$this -> assertNull ($this -> object -> isSpellChecked ());
		$this -> assertNotTag (array ('attributes' => array ('spellcheck')), (string) $this -> object);
	}

	public function testStyle1 ()
	{
		$this -> object -> setStyle ('overflow:hidden;');
		$this -> assertEquals ('overflow:hidden;', $this -> object -> getStyle ());
		$this -> assertTag (array ('attributes' => array ('style' => 'overflow:hidden;')), (string) $this -> object);
	}
	
	public function testStyle2 ()
	{
		$this -> object -> setStyle ('overflow:hidden;');
		$this -> object -> setStyle (NULL);
		$this -> assertEmpty ($this -> object -> getStyle ());
		$this -> assertNotTag (array ('attributes' => array ('style')), (string) $this -> object);
	}
	
	public function testTabIndex1 ()
	{
		$this -> object -> setTabIndex (1);
		$this -> assertEquals (1, $this -> object -> getTabIndex ());
		$this -> assertTag (array ('attributes' => array ('tabindex' => '1')), (string) $this -> object);
	}

	public function testTabIndex2 ()
	{
		$this -> object -> setTabIndex (1);
		$this -> object -> setTabIndex (NULL);
		$this -> assertEmpty ($this -> object -> getTabIndex ());
		$this -> assertNotTag (array ('attributes' => array ('tabindex')), (string) $this -> object);
	}
	
	public function testTitle1 ()
	{
		$this -> object -> setTitle ('The quick brown fox jumps over the lazy dog');
		$this -> assertEquals ('The quick brown fox jumps over the lazy dog', $this -> object -> getTitle ());
		$this -> assertTag (array ('attributes' => array ('title' => 'The quick brown fox jumps over the lazy dog')), (string) $this -> object);
	}

	public function testTitle2 ()
	{
		$this -> object -> setTitle ('The quick brown fox jumps over the lazy dog');
		$this -> object -> setTitle (NULL);
		$this -> assertEmpty ($this -> object -> getTitle ());
		$this -> assertNotTag (array ('attributes' => array ('title')), (string) $this -> object);
	}

	/**
	 * Test that we get the expected tag back after a simple instantiation
	 */
	public function test__toString ()
	{
		$this -> object -> addClass ('foo')
						-> addClass ('bar')
						-> addClass ('baz')
						-> setId ('myid')
						-> setTitle ('The quick brown fox jumps over the lazy dog');
		$this -> assertTag (array (
			'tag'			=> 'hr',
			'attributes'	=> array (
				'class'		=> 'foo bar baz',
				'id'		=> 'myid',
				'title'		=> 'The quick brown fox jumps over the lazy dog'
			)
		), (string) $this -> object);
	}
}
