<?php

namespace gordian\reefknot\util;

/**
 * Test class for Password.
 * Generated by PHPUnit on 2011-12-17 at 18:10:33.
 */
class PasswordTest extends \PHPUnit_Framework_TestCase
{

	/**
	 * @var gordian\reefknot\util\Password
	 */
	protected $object;
	
	const 
		PW_MIN		= 15,
		PW_MAX		= 255,
		TESTS_MAX	= 100;
	
	/**
	 * Sets up the fixture, for example, opens a network connection.
	 * This method is called before a test is executed.
	 */
	protected function setUp ()
	{
	}

	/**
	 * Tears down the fixture, for example, closes a network connection.
	 * This method is called after a test is executed.
	 */
	protected function tearDown ()
	{
	}

	public function testGetPassword ()
	{
		for ($i	= 0; $i < self::TESTS_MAX; $i++)
		{
			$this -> object = new Password (self::PW_MIN, self::PW_MAX);
			$pw	= $this -> object -> getPassword ();
			$this -> assertTrue (strlen ($pw) >= self::PW_MIN);
			$this -> assertTrue (strlen ($pw) <= self::PW_MAX);
			$this -> assertTrue ((bool) preg_match ('/^[a-zA-Z0-9_-]{' . self::PW_MIN . ',' . self::PW_MAX . '}$/', $pw));
			$this -> assertTrue ($pw === $this -> object -> getPassword ());
		}
	}
	
	public function testGetPasswordFixedLen ()
	{
		for ($i	= 0; $i < self::TESTS_MAX; $i++)
		{
			$this -> object = new Password (self::PW_MIN, self::PW_MIN);
			$pw	= $this -> object -> getPassword ();
			$this -> assertTrue (strlen ($pw) == self::PW_MIN);
			$this -> assertTrue ((bool) preg_match ('/^[a-zA-Z0-9_-]{' . self::PW_MIN . ',' . self::PW_MIN . '}$/', $pw));
			$this -> assertTrue ($pw === $this -> object -> getPassword ());
		}
	}
	
	public function testGetPasswordFixedLen2 ()
	{
		for ($i	= 0; $i < self::TESTS_MAX; $i++)
		{
			$this -> object = new Password (self::PW_MAX, self::PW_MAX);
			$pw	= $this -> object -> getPassword ();
			$this -> assertTrue (strlen ($pw) == self::PW_MAX);
			$this -> assertTrue ((bool) preg_match ('/^[a-zA-Z0-9_-]{' . self::PW_MAX . ',' . self::PW_MAX . '}$/', $pw));
			$this -> assertTrue ($pw === $this -> object -> getPassword ());
		}
	}
	
	public function testInvalidLenThrowsException ()
	{
		$exception	= NULL;
		try
		{
			$this -> object = new Password (self::PW_MAX, self::PW_MIN);
		}
		catch (\Exception $e)
		{
			$exception	= $e;
		}
		$this -> assertTrue ($exception instanceof \InvalidArgumentException);
	}
}
