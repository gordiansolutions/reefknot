<?php

namespace gordian\reefknot\util;

/**
 * The following function will take the place of mt_rand for the duration of 
 * the test.  It always returns the number exactly half way between the min 
 * and the max.
 */
function mt_rand ($min = 42, $max = NULL)
{
	$min	= intval ($min);
	$max	= intval ($max);
	
	$max	= $max < $min? $min: $max;
	$ret	= round (($max - $min) / 2) + $min;
	
	fwrite (STDOUT, PHP_EOL . PHP_EOL . $ret . PHP_EOL . PHP_EOL);
	return ($ret);
}

/**
 * Override the password character pool for the test 
 */
class PasswordSubclass extends Password
{
	const CHARLIST	= 'AAAAAAAAAA';
}

/**
 * Test class for Password.
 * Generated by PHPUnit on 2011-12-17 at 18:10:33.
 */
class PasswordTest extends \PHPUnit_Framework_TestCase
{

	/**
	 * @var gordian\reefknot\util\Password
	 */
	protected $object;
	
	const PW_MIN	= 15;
	const PW_MAX	= 20;
	
	/**
	 * Sets up the fixture, for example, opens a network connection.
	 * This method is called before a test is executed.
	 */
	protected function setUp ()
	{
	}

	/**
	 * Tears down the fixture, for example, closes a network connection.
	 * This method is called after a test is executed.
	 */
	protected function tearDown ()
	{
		
	}

	public function testGetPassword ()
	{
		$this -> object = new PasswordSubclass (self::PW_MIN, self::PW_MAX);
		$pw	= $this -> object -> getPassword ();
		$this -> assertTrue ((bool) preg_match ('/^A{' . self::PW_MIN . ',' . self::PW_MAX . '}$/', $pw));
		$this -> assertTrue (strlen ($pw) >= self::PW_MIN);
		$this -> assertTrue (strlen ($pw) <= self::PW_MAX);
		$this -> assertTrue ($pw === $this -> object -> getPassword ());
	}
	
	public function testGetPasswordFixedLen ()
	{
		$this -> object = new PasswordSubclass (self::PW_MIN, self::PW_MIN);
		$pw	= $this -> object -> getPassword ();
		$this -> assertTrue ($pw === 'AAAAAAAAAAAAAAA');
		$this -> assertTrue ($pw === $this -> object -> getPassword ());
	}
	
	public function testGetPasswordFixedLen2 ()
	{
		$this -> object = new PasswordSubclass (self::PW_MAX, self::PW_MAX);
		$pw	= $this -> object -> getPassword ();
		$this -> assertTrue ($pw === 'AAAAAAAAAAAAAAAAAAAA');
		$this -> assertTrue ($pw === $this -> object -> getPassword ());
	}
	
	public function testInvalidLenThrowsException ()
	{
		$exception	= NULL;
		try
		{
			$this -> object = new PasswordSubclass (self::PW_MAX, self::PW_MIN);
		}
		catch (\Exception $e)
		{
			$exception	= $e;
		}
		$this -> assertTrue ($exception instanceof \InvalidArgumentException);
	}
}
