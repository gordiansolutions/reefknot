<?php

namespace gordian\reefknot\autoload\classmap;

require_once dirname (__FILE__) . '/../../../autoload/classmap/ArrayClassMap.php';

/**
 * Test class for ArrayClassMap.
 * Generated by PHPUnit on 2013-10-26 at 22:12:31.
 */
class ArrayClassMapTest extends \PHPUnit_Framework_TestCase
{

	/**
	 * @var ArrayClassMap
	 */
	protected $object;

	/**
	 * Sets up the fixture, for example, opens a network connection.
	 * This method is called before a test is executed.
	 */
	protected function setUp ()
	{
		$this -> object = new ArrayClassMap;
	}

	/**
	 * Tears down the fixture, for example, closes a network connection.
	 * This method is called after a test is executed.
	 */
	protected function tearDown ()
	{
		
	}

	/**
	 * Test that an added path can be retrieved
	 * 
	 */
	public function testGetPath ()
	{
		$this -> object -> addPath ('\gordian\exampleclasses\foo\FooClass', '/Users/gordonmcvey/Sites/gordian/reefknot/_unittest/autoload/exampleclasses/foo/FooClass.php');
		$this -> assertNotEmpty ($this -> object -> getPath ('\gordian\exampleclasses\foo\FooClass'));
		$this -> assertEquals ($this -> object -> getPath ('\gordian\exampleclasses\foo\FooClass'), '/Users/gordonmcvey/Sites/gordian/reefknot/_unittest/autoload/exampleclasses/foo/FooClass.php');
	}
	
	/**
	 * Test that an undefined class returns NULL
	 * 
	 */
	public function testGetPathAssertNull ()
	{
		$this -> assertNull ($this -> object -> getPath ('\gordian\exampleclasses\foo\FooClass'));		
	}
	
	/**
	 * Test that a path can be removed
	 * 
	 */
	public function testRemovePath ()
	{
		$this -> object -> addPath ('\gordian\exampleclasses\foo\FooClass', '/Users/gordonmcvey/Sites/gordian/reefknot/_unittest/autoload/exampleclasses/foo/FooClass.php');
		$this -> object -> removePath ('\gordian\exampleclasses\foo\FooClass');
		$this -> assertNull ($this -> object -> getPath ('\gordian\exampleclasses\foo\FooClass'));		
	}

	/**
	 * Test that resetting the class map empties it
	 * 
	 */
	public function testReset ()
	{
		$this -> object -> addPath ('\gordian\exampleclasses\foo\FooClass', '/Users/gordonmcvey/Sites/gordian/reefknot/_unittest/autoload/exampleclasses/foo/FooClass.php');
		$this -> assertNotEmpty ($this -> object -> getAll ());
		$this -> object -> reset ();
		$this -> assertEmpty ($this -> object -> getAll ());
	}

	/**
	 * Test that getAll returns a complete class map array
	 * 
	 */
	public function testGetAll ()
	{
		$this -> object -> addPath ('\gordian\exampleclasses\foo\FooClass', '/Users/gordonmcvey/Sites/gordian/reefknot/_unittest/autoload/exampleclasses/foo/FooClass.php');
		$this -> object -> addPath ('\gordian\exampleclasses\foo\FooInterface', '/Users/gordonmcvey/Sites/gordian/reefknot/_unittest/autoload/exampleclasses/foo/FooInterface.php');
		$this -> object -> addPath ('\gordian\exampleclasses\foo\FooTrait', '/Users/gordonmcvey/Sites/gordian/reefknot/_unittest/autoload/exampleclasses/foo/FooTrait.php');
		$this -> object -> addPath ('\gordian\exampleclasses\foo\FooTraitClient', '/Users/gordonmcvey/Sites/gordian/reefknot/_unittest/autoload/exampleclasses/foo/FooTraitClient.php');
		$this -> assertTrue (is_array ($this -> object -> getAll ()));
		$this -> assertCount (4, $this -> object -> getAll ());
		$this -> assertArrayHasKey ('\gordian\exampleclasses\foo\FooClass', $this -> object -> getAll ());
		$this -> assertArrayHasKey ('\gordian\exampleclasses\foo\FooInterface', $this -> object -> getAll ());
		$this -> assertArrayHasKey ('\gordian\exampleclasses\foo\FooTrait', $this -> object -> getAll ());
		$this -> assertArrayHasKey ('\gordian\exampleclasses\foo\FooTraitClient', $this -> object -> getAll ());
		$this -> assertContains ('/Users/gordonmcvey/Sites/gordian/reefknot/_unittest/autoload/exampleclasses/foo/FooClass.php', $this -> object -> getAll ());
		$this -> assertContains ('/Users/gordonmcvey/Sites/gordian/reefknot/_unittest/autoload/exampleclasses/foo/FooInterface.php', $this -> object -> getAll ());
		$this -> assertContains ('/Users/gordonmcvey/Sites/gordian/reefknot/_unittest/autoload/exampleclasses/foo/FooTrait.php', $this -> object -> getAll ());
		$this -> assertContains ('/Users/gordonmcvey/Sites/gordian/reefknot/_unittest/autoload/exampleclasses/foo/FooTraitClient.php', $this -> object -> getAll ());
	}
	
	/**
	 * Test we can populate the class map on construction
	 * 
	 */
	public function testPopulation ()
	{
		$this -> object	= new ArrayClassMap (array (
			'\gordian\exampleclasses\foo\FooClass'			=> '/Users/gordonmcvey/Sites/gordian/reefknot/_unittest/autoload/exampleclasses/foo/FooClass.php',
			'\gordian\exampleclasses\foo\FooInterface'		=> '/Users/gordonmcvey/Sites/gordian/reefknot/_unittest/autoload/exampleclasses/foo/FooInterface.php',
			'\gordian\exampleclasses\foo\FooTrait'			=> '/Users/gordonmcvey/Sites/gordian/reefknot/_unittest/autoload/exampleclasses/foo/FooTrait.php',
			'\gordian\exampleclasses\foo\FooTraitClient'	=> '/Users/gordonmcvey/Sites/gordian/reefknot/_unittest/autoload/exampleclasses/foo/FooTraitClient.php'
		));
		$this -> assertTrue (is_array ($this -> object -> getAll ()));
		$this -> assertCount (4, $this -> object -> getAll ());
		$this -> assertArrayHasKey ('\gordian\exampleclasses\foo\FooClass', $this -> object -> getAll ());
		$this -> assertArrayHasKey ('\gordian\exampleclasses\foo\FooInterface', $this -> object -> getAll ());
		$this -> assertArrayHasKey ('\gordian\exampleclasses\foo\FooTrait', $this -> object -> getAll ());
		$this -> assertArrayHasKey ('\gordian\exampleclasses\foo\FooTraitClient', $this -> object -> getAll ());
		$this -> assertContains ('/Users/gordonmcvey/Sites/gordian/reefknot/_unittest/autoload/exampleclasses/foo/FooClass.php', $this -> object -> getAll ());
		$this -> assertContains ('/Users/gordonmcvey/Sites/gordian/reefknot/_unittest/autoload/exampleclasses/foo/FooInterface.php', $this -> object -> getAll ());
		$this -> assertContains ('/Users/gordonmcvey/Sites/gordian/reefknot/_unittest/autoload/exampleclasses/foo/FooTrait.php', $this -> object -> getAll ());
		$this -> assertContains ('/Users/gordonmcvey/Sites/gordian/reefknot/_unittest/autoload/exampleclasses/foo/FooTraitClient.php', $this -> object -> getAll ());
	}
}
