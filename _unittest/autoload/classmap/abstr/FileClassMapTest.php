<?php

namespace gordian\reefknot\autoload\classmap\abstr;
use org\bovigo\vfs\vfsStream;

/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.1 on 2013-12-15 at 12:42:11.
 */
class FileClassMapTest extends \PHPUnit_Framework_TestCase
{

	/**
	 * @var FileClassMap
	 */
	protected $object;
	
	/**
	 *
	 * @var \org\bovigo\vfs\vfsStreamDirectory
	 */
	protected $fs;
	
	/**
	 * Sets up the fixture, for example, opens a network connection.
	 * This method is called before a test is executed.
	 */
	protected function setUp ()
	{
		$this -> object = $this -> getMockForAbstractClass ('gordian\reefknot\autoload\classmap\abstr\FileClassMap');
		$this -> fs = vfsStream::setup ('fileclassmap');
	}

	/**
	 * Tears down the fixture, for example, closes a network connection.
	 * This method is called after a test is executed.
	 */
	protected function tearDown ()
	{
		
	}
	
	/**
	 * Test we can set the filename to a writable file
	 */
	public function testSetFileName ()
	{	
		// Set up a typical test file
		$url		= vfsStream::url ('fileclassmap/text.txt');
		$content	= "It rubs the lotion on its skin or else it gets the hose again";
		file_put_contents ($url, $content);

		$this -> object -> setFileName ($url);
		$this -> assertEquals ($url, $this -> object -> getFileName ());
	}
	
	
	/**
	 * Test we can set the filename to a non-existant file in a writable directory
	 */
	public function testSetFileNameNoFile ()
	{	
		$url	= vfsStream::url ('fileclassmap/text.txt');

		$this -> object -> setFileName ($url);
		$this -> assertEquals ($url, $this -> object -> getFileName ());
	}
	
	/**
	 * Test that trying to use a file without read permission triggers an exception
	 * 
	 * @expectedException InvalidArgumentException
	 */
	public function testSetFileNameUnreadableFile () {
		$url		= vfsStream::url ('fileclassmap/text.txt');
		$content	= "It rubs the lotion on its skin or else it gets the hose again";
		file_put_contents ($url, $content);
		chmod ($url, 0300);
		
		$this -> object -> setFileName ($url);
	}
	
	/**
	 * Test that trying to use a file without write permission triggers an exception
	 * 
	 * @expectedException InvalidArgumentException
	 */
	public function gestSetFileNameUnwritableFile () {
		$url		= vfsStream::url ('fileclassmap/text.txt');
		$content	= "It rubs the lotion on its skin or else it gets the hose again";
		file_put_contents ($url, $content);
		chmod ($url, 0400);
		
		$this -> object -> setFileName ($url);
	}
	
	/**
	 * Test that trying to create a new file in an unreadable directory triggers an exception
	 * 
	 * @expectedException InvalidArgumentException
	 */
	public function testSetFileNameUnreadableDir () {
		$url		= vfsStream::url ('fileclassmap');
		chmod ($url, 0300);
		
		$this -> object -> setFileName ($url);
	}
	
	/**
	 * Test that trying to create a new file in an unwritable directory triggers an exception
	 * 
	 * @expectedException InvalidArgumentException
	 */
	public function gestSetFileNameUnwritableDir () {
		$url		= vfsStream::url ('fileclassmap');
		chmod ($url, 0400);
		
		$this -> object -> setFileName ($url);
	}
	
	/**
	 * Test that trying to open a file that's actually not a file triggers an exception
	 * 
	 * @expectedException InvalidArgumentException
	 */
	public function testSetFileNotFile () {
		$url		= vfsStream::url ('fileclassmap/text.txt');
		mkdir ($url);
		
		$this -> object -> setFileName ($url);
	}
	
	/**
	 * Test that calling setFile with an empty string throws an exception
	 * 
	 * @expectedException InvalidArgumentException
	 */
	public function testSetFileNoInput () {
		$this -> object -> setFileName ('');
	}
	
	/**
	 * Test getFileName
	 */
	public function testGetFileName ()
	{
		// Set up a typical test file
		$url		= vfsStream::url ('fileclassmap/text.txt');

		$this -> object -> setFileName ($url);
		$this -> assertEquals ($url, $this -> object -> getFileName ());
	}

	/**
	 */
	public function testIsAutoSaveEnabled ()
	{
		$this -> object -> enableAutoSave ();
		$this -> assertTrue ($this -> object -> isAutoSaveEnabled ());
	}

	/**
	 */
	public function testEnableAutoSave ()
	{
		$this -> object -> enableAutoSave ();
		$this -> assertTrue ($this -> object -> isAutoSaveEnabled ());
	}

	/**
	 */
	public function testDisableAutoSave ()
	{
		$this -> object -> disableAutoSave ();
		$this -> assertFalse ($this -> object -> isAutoSaveEnabled ());
	}
}
