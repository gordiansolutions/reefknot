<?php

namespace gordian\reefknot\autoload;

use gordian\exampleclasses;

/**
 * Test class for Autoload.
 * Generated by PHPUnit on 2011-12-17 at 18:10:33.
 */
class AutoloadTest extends \PHPUnit_Framework_TestCase
{
	public function __destruct ()
	{
	}
	
	/**
	 * @var gordian\reefknot\autoload\Autoload
	 */
	protected $object;

	/**
	 * Sets up the fixture, for example, opens a network connection.
	 * This method is called before a test is executed.
	 */
	protected function setUp ()
	{
		// Disable the unit test autoloader for the duration of the following test
		global $unitTestAutoloader;
		$unitTestAutoloader -> unregister ();
		$this -> object = new Autoload (__DIR__ . '/exampleclasses', 'gordian\exampleclasses');
	}

	/**
	 * Tears down the fixture, for example, closes a network connection.
	 * This method is called after a test is executed.
	 */
	protected function tearDown ()
	{
		unset ($this -> object);
		// Restore normal autoloading when the test is done
		global $unitTestAutoloader;
		$unitTestAutoloader -> register ();
	}
	
	/**
	 * Test normal load case 
	 */
	public function testAutoloadPass ()
	{
		$this -> assertFalse (class_exists ('gordian\exampleclasses\foo\FooClass', false));
		$a	= new exampleclasses\foo\FooClass ();
		$this -> assertTrue (class_exists ('gordian\exampleclasses\foo\FooClass', false));
		$this -> assertTrue ($a instanceof exampleclasses\foo\FooClass);
	}
	
	/**
	 * Demonstrate correct loading of classes using a PERL/Zend framework naming style 
	 */
	public function testAutoloadPearStylePass ()
	{
		unset ($this -> object);
		$this -> object = new Autoload (__DIR__ . '/exampleclasses', 'gordian_exampleclasses', '_');
		$this -> assertFalse (class_exists ('gordian_exampleclasses_baz_BazClass', false));
		$a	= new \gordian_exampleclasses_baz_BazClass ();
		$this -> assertTrue (class_exists ('gordian_exampleclasses_baz_BazClass', false));
		$this -> assertTrue ($a instanceof \gordian_exampleclasses_baz_BazClass);
	}
	
	
	/**
	 * Test that the autoloader behaves correctly when it can't find the 
	 * specified class file 
	 */
	public function testAutoloadFail ()
	{
		// Check the class doesn't already exist
		$this -> assertFalse (class_exists ('gordian\exampleclasses\quux\FaebleClass', false));
		// Check the class doesn't exist after an autoload attempt
		$this -> assertFalse (class_exists ('gordian\exampleclasses\quux\FaebleClass', true));
	}
	
	/**
	 * Test that the autoloader behaves correctly when looking for a class when
	 * the file contains a class that doesn't conform to the correct naming 
	 * convention
	 */
	public function testAutoloadFail2 ()
	{
		// Check the class doesn't already exist
		$this -> assertFalse (class_exists ('gordian\exampleclasses\bar\BarClass', false));
		// Check the class doesn't exist after an autoload attempt
		$this -> assertFalse (class_exists ('gordian\exampleclasses\bar\BarClass', true));
		// Check that our misnamed class does exist
		$this -> assertTrue (class_exists ('gordian\exampleclasses\bar\FooClass', false));
		$a	= new exampleclasses\bar\FooClass;
		$this -> assertTrue ($a instanceof exampleclasses\bar\FooClass);
	}
	
	/**
	 * Test ability to enable the autoloader
	 */
	public function testRegister ()
	{
		$arr	= array ($this -> object, 'load');
		$this -> object -> unregister ();
		$this -> assertFalse (in_array ($arr, spl_autoload_functions ()));
		$this -> object -> register ();
		$this -> assertTrue (in_array ($arr, spl_autoload_functions ()));
	}

	/**
	 * Test ability to disable the autoloader
	 */
	public function testUnregister ()
	{
		$arr	= array ($this -> object, 'load');
		$this -> assertTrue (in_array ($arr, spl_autoload_functions ()));
		$this -> object -> unregister ();
		$this -> assertFalse (in_array ($arr, spl_autoload_functions ()));
	}
}
